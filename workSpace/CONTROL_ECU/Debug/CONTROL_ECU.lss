
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002266  000022fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080017a  0080017a  00002414  2**0
                  ALLOC
  3 .stab         00002124  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012fb  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005833  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000059f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00005c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008219  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000096e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000a9f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000abd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000aedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 13 0e 	jmp	0x1c26	; 0x1c26 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <main>
      8a:	0c 94 31 11 	jmp	0x2262	; 0x2262 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 11 	jmp	0x222c	; 0x222c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 11 	jmp	0x220c	; 0x220c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 11 	jmp	0x220c	; 0x220c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 11 	jmp	0x222c	; 0x222c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 06 11 	jmp	0x220c	; 0x220c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 06 11 	jmp	0x220c	; 0x220c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 06 11 	jmp	0x220c	; 0x220c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 22 11 	jmp	0x2244	; 0x2244 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 26 11 	jmp	0x224c	; 0x224c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 02 11 	jmp	0x2204	; 0x2204 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 1e 11 	jmp	0x223c	; 0x223c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Buzzer_init>:
/*
 * Description:
 * Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * Turn off the buzzer through the GPIO.
 */
void Buzzer_init(){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_setupPinDirection>
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Buzzer_on>:

/*
 * Description:
 * Function to enable the Buzzer through the GPIO.
 */
void Buzzer_on(void){
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID ,LOGIC_HIGH);
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <Buzzer_off>:

/*
 * Description:
 * Function to disable the Buzzer through the GPIO
 */
void Buzzer_off(void){
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID ,LOGIC_LOW);
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <EEPROM_writeByte>:

/*
 * write one byte into specific address to External EEPROM using TWI
 * single meesage
 */
uint8 EEPROM_writeByte(uint16 address, uint8 *data) {
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <EEPROM_writeByte+0x6>
     f38:	00 d0       	rcall	.+0      	; 0xf3a <EEPROM_writeByte+0x8>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <EEPROM_writeByte+0xa>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	9b 83       	std	Y+3, r25	; 0x03
     f42:	8a 83       	std	Y+2, r24	; 0x02
     f44:	7d 83       	std	Y+5, r23	; 0x05
     f46:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	/* first take the control of TWI drive */
	TWI_start();
     f48:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <TWI_start>
	if (TWI_getStatus() != TWI_START)
     f4c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	11 f0       	breq	.+4      	; 0xf58 <EEPROM_writeByte+0x26>
		return EEPROM_ERROR;
     f54:	1e 82       	std	Y+6, r1	; 0x06
     f56:	37 c0       	rjmp	.+110    	; 0xfc6 <EEPROM_writeByte+0x94>
	/*
	 * send the address of slave ->EEPROM
	 * send last 3 bits of address
	 * write mode
	*/
	TWI_writeByte((0xa0) | ((address >> 7) & (0x0e)));
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	88 0f       	add	r24, r24
     f5e:	89 2f       	mov	r24, r25
     f60:	88 1f       	adc	r24, r24
     f62:	99 0b       	sbc	r25, r25
     f64:	91 95       	neg	r25
     f66:	8e 70       	andi	r24, 0x0E	; 14
     f68:	80 6a       	ori	r24, 0xA0	; 160
     f6a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f6e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
     f72:	88 31       	cpi	r24, 0x18	; 24
     f74:	11 f0       	breq	.+4      	; 0xf7a <EEPROM_writeByte+0x48>
		return EEPROM_ERROR;
     f76:	1e 82       	std	Y+6, r1	; 0x06
     f78:	26 c0       	rjmp	.+76     	; 0xfc6 <EEPROM_writeByte+0x94>

	/* send data contain last bits of the address */
	TWI_writeByte((uint8)address);
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f80:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
     f84:	88 32       	cpi	r24, 0x28	; 40
     f86:	11 f0       	breq	.+4      	; 0xf8c <EEPROM_writeByte+0x5a>
		return EEPROM_ERROR;
     f88:	1e 82       	std	Y+6, r1	; 0x06
     f8a:	1d c0       	rjmp	.+58     	; 0xfc6 <EEPROM_writeByte+0x94>

	/* send data to EEPROM */
	for(i=0;i<5;i++){
     f8c:	19 82       	std	Y+1, r1	; 0x01
     f8e:	0e c0       	rjmp	.+28     	; 0xfac <EEPROM_writeByte+0x7a>
		TWI_writeByte(data[i]);
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	80 81       	ld	r24, Z
     fa2:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TWI_writeByte>
	TWI_writeByte((uint8)address);
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
		return EEPROM_ERROR;

	/* send data to EEPROM */
	for(i=0;i<5;i++){
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	85 30       	cpi	r24, 0x05	; 5
     fb0:	78 f3       	brcs	.-34     	; 0xf90 <EEPROM_writeByte+0x5e>
		TWI_writeByte(data[i]);
	}

	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fb2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
     fb6:	88 32       	cpi	r24, 0x28	; 40
     fb8:	11 f0       	breq	.+4      	; 0xfbe <EEPROM_writeByte+0x8c>
		return EEPROM_ERROR;
     fba:	1e 82       	std	Y+6, r1	; 0x06
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <EEPROM_writeByte+0x94>

	/* Stop the communication */
	TWI_stop();
     fbe:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <TWI_stop>

	return EEPROM_SUCCESS;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8e 83       	std	Y+6, r24	; 0x06
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
}
     fc8:	26 96       	adiw	r28, 0x06	; 6
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <EEPROM_readByte>:

/*
 * read one byte from specific address at External EEPROM using TWI
 * combined message
 */
uint8 EEPROM_readByte(uint16 address, uint8 *data) {
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <EEPROM_readByte+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <EEPROM_readByte+0x8>
     fe2:	0f 92       	push	r0
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	7c 83       	std	Y+4, r23	; 0x04
     fee:	6b 83       	std	Y+3, r22	; 0x03
	/* first take the control of TWI drive */
	TWI_start();
     ff0:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <TWI_start>
	if (TWI_getStatus() != TWI_START)
     ff4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	11 f0       	breq	.+4      	; 0x1000 <EEPROM_readByte+0x26>
		return EEPROM_ERROR;
     ffc:	1d 82       	std	Y+5, r1	; 0x05
     ffe:	3c c0       	rjmp	.+120    	; 0x1078 <EEPROM_readByte+0x9e>
	/*
	 * send the address of slave ->EEPROM
	 * send last 3 bits of address
	 * write mode
	 */
	TWI_writeByte((0xa0) | ((address >> 7) & (0x0e)));
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	88 0f       	add	r24, r24
    1006:	89 2f       	mov	r24, r25
    1008:	88 1f       	adc	r24, r24
    100a:	99 0b       	sbc	r25, r25
    100c:	91 95       	neg	r25
    100e:	8e 70       	andi	r24, 0x0E	; 14
    1010:	80 6a       	ori	r24, 0xA0	; 160
    1012:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1016:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
    101a:	88 31       	cpi	r24, 0x18	; 24
    101c:	11 f0       	breq	.+4      	; 0x1022 <EEPROM_readByte+0x48>
		return EEPROM_ERROR;
    101e:	1d 82       	std	Y+5, r1	; 0x05
    1020:	2b c0       	rjmp	.+86     	; 0x1078 <EEPROM_readByte+0x9e>

	/* send data contain last bits of the address */
	TWI_writeByte((uint8)address);
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1028:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
    102c:	88 32       	cpi	r24, 0x28	; 40
    102e:	11 f0       	breq	.+4      	; 0x1034 <EEPROM_readByte+0x5a>
		return EEPROM_ERROR;
    1030:	1d 82       	std	Y+5, r1	; 0x05
    1032:	22 c0       	rjmp	.+68     	; 0x1078 <EEPROM_readByte+0x9e>

	/* repeated start */
	TWI_start();
    1034:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <TWI_start>
	/*
	 * send the address of slave ->EEPROM
	 * send last 3 bits of address
	 * read mode
	 */
	TWI_writeByte((0xa1) | ((address >> 7) & (0x0e)));
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	88 0f       	add	r24, r24
    103e:	89 2f       	mov	r24, r25
    1040:	88 1f       	adc	r24, r24
    1042:	99 0b       	sbc	r25, r25
    1044:	91 95       	neg	r25
    1046:	8e 70       	andi	r24, 0x0E	; 14
    1048:	81 6a       	ori	r24, 0xA1	; 161
    104a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MR_SLA_R_ACK)
    104e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
    1052:	80 34       	cpi	r24, 0x40	; 64
    1054:	11 f0       	breq	.+4      	; 0x105a <EEPROM_readByte+0x80>
		return EEPROM_ERROR;
    1056:	1d 82       	std	Y+5, r1	; 0x05
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <EEPROM_readByte+0x9e>

	/* read data */
	*data = TWI_readByteWithNACK();
    105a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <TWI_readByteWithNACK>
    105e:	eb 81       	ldd	r30, Y+3	; 0x03
    1060:	fc 81       	ldd	r31, Y+4	; 0x04
    1062:	80 83       	st	Z, r24

	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1064:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <TWI_getStatus>
    1068:	88 35       	cpi	r24, 0x58	; 88
    106a:	11 f0       	breq	.+4      	; 0x1070 <EEPROM_readByte+0x96>
		return EEPROM_ERROR;
    106c:	1d 82       	std	Y+5, r1	; 0x05
    106e:	04 c0       	rjmp	.+8      	; 0x1078 <EEPROM_readByte+0x9e>

	TWI_stop();
    1070:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <TWI_stop>

	return EEPROM_SUCCESS;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	8d 83       	std	Y+5, r24	; 0x05
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <GPIO_setupPinDirection>:
/*
 * setup pin direction input/output pin
 * if the input port_number or pin_number are not valid do nothing
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <GPIO_setupPinDirection+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <GPIO_setupPinDirection+0x8>
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	6a 83       	std	Y+2, r22	; 0x02
    109c:	4b 83       	std	Y+3, r20	; 0x03
	/* if valid arguments */
	if (port_num >= 0 && port_num <= 3 && pin_num >= 0 && pin_num <= 7) {
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <GPIO_setupPinDirection+0x1c>
    10a4:	d5 c0       	rjmp	.+426    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	88 30       	cpi	r24, 0x08	; 8
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <GPIO_setupPinDirection+0x24>
    10ac:	d1 c0       	rjmp	.+418    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
		/* Choose which port we need to configure it */
		switch (port_num) {
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3d 83       	std	Y+5, r19	; 0x05
    10b6:	2c 83       	std	Y+4, r18	; 0x04
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <GPIO_setupPinDirection+0x3a>
    10c2:	43 c0       	rjmp	.+134    	; 0x114a <GPIO_setupPinDirection+0xc0>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <GPIO_setupPinDirection+0x4e>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <GPIO_setupPinDirection+0x68>
    10d6:	bc c0       	rjmp	.+376    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <GPIO_setupPinDirection+0x5a>
    10e2:	5f c0       	rjmp	.+190    	; 0x11a2 <GPIO_setupPinDirection+0x118>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <GPIO_setupPinDirection+0x66>
    10ee:	85 c0       	rjmp	.+266    	; 0x11fa <GPIO_setupPinDirection+0x170>
    10f0:	af c0       	rjmp	.+350    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
		case 0:
			if (direction == PIN_INPUT) {
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 23       	and	r24, r24
    10f6:	a9 f4       	brne	.+42     	; 0x1122 <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA, pin_num); /* clear this pit as it will be INPUT */
    10f8:	aa e3       	ldi	r26, 0x3A	; 58
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_setupPinDirection+0x8c>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_setupPinDirection+0x88>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	97 c0       	rjmp	.+302    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRA, pin_num); /* Set this pit as it will be OUTPUT */
    1122:	aa e3       	ldi	r26, 0x3A	; 58
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ea e3       	ldi	r30, 0x3A	; 58
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_setupPinDirection+0xb6>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_setupPinDirection+0xb2>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	83 c0       	rjmp	.+262    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case 1:
			if (direction == PIN_INPUT) {
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 23       	and	r24, r24
    114e:	a9 f4       	brne	.+42     	; 0x117a <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB, pin_num);
    1150:	a7 e3       	ldi	r26, 0x37	; 55
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e7 e3       	ldi	r30, 0x37	; 55
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_setupPinDirection+0xe4>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_setupPinDirection+0xe0>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	6b c0       	rjmp	.+214    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRB, pin_num);
    117a:	a7 e3       	ldi	r26, 0x37	; 55
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e7 e3       	ldi	r30, 0x37	; 55
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_setupPinDirection+0x10e>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_setupPinDirection+0x10a>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	57 c0       	rjmp	.+174    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case 2:
			if (direction == PIN_INPUT) {
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	88 23       	and	r24, r24
    11a6:	a9 f4       	brne	.+42     	; 0x11d2 <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC, pin_num);
    11a8:	a4 e3       	ldi	r26, 0x34	; 52
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e4 e3       	ldi	r30, 0x34	; 52
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_setupPinDirection+0x13c>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_setupPinDirection+0x138>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	3f c0       	rjmp	.+126    	; 0x1250 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRC, pin_num);
    11d2:	a4 e3       	ldi	r26, 0x34	; 52
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e4 e3       	ldi	r30, 0x34	; 52
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <GPIO_setupPinDirection+0x166>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <GPIO_setupPinDirection+0x162>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	2b c0       	rjmp	.+86     	; 0x1250 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case 3:
			if (direction == PIN_INPUT) {
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 23       	and	r24, r24
    11fe:	a9 f4       	brne	.+42     	; 0x122a <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD, pin_num);
    1200:	a1 e3       	ldi	r26, 0x31	; 49
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e1 e3       	ldi	r30, 0x31	; 49
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_setupPinDirection+0x194>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_setupPinDirection+0x190>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	13 c0       	rjmp	.+38     	; 0x1250 <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRD, pin_num);
    122a:	a1 e3       	ldi	r26, 0x31	; 49
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e1 e3       	ldi	r30, 0x31	; 49
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_setupPinDirection+0x1be>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_setupPinDirection+0x1ba>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
		default:
			break;
		}
	}
	return;
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <GPIO_writePin>:
/*
 * Write logic value on the required pin
 * if the input port_number or pin_number are not valid do nothing
 * if the pin is input, it will enable/disable internal pull-up
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <GPIO_writePin+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <GPIO_writePin+0x8>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	6a 83       	std	Y+2, r22	; 0x02
    1272:	4b 83       	std	Y+3, r20	; 0x03
	/* if valid arguments */
	if (port_num >= 0 && port_num <= 3 && pin_num >= 0 && pin_num <= 7) {
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	84 30       	cpi	r24, 0x04	; 4
    1278:	08 f0       	brcs	.+2      	; 0x127c <GPIO_writePin+0x1c>
    127a:	d5 c0       	rjmp	.+426    	; 0x1426 <GPIO_writePin+0x1c6>
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	88 30       	cpi	r24, 0x08	; 8
    1280:	08 f0       	brcs	.+2      	; 0x1284 <GPIO_writePin+0x24>
    1282:	d1 c0       	rjmp	.+418    	; 0x1426 <GPIO_writePin+0x1c6>
		/* Choose which port we need to write on it */
		switch (port_num) {
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3d 83       	std	Y+5, r19	; 0x05
    128c:	2c 83       	std	Y+4, r18	; 0x04
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	9d 81       	ldd	r25, Y+5	; 0x05
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	09 f4       	brne	.+2      	; 0x129a <GPIO_writePin+0x3a>
    1298:	43 c0       	rjmp	.+134    	; 0x1320 <GPIO_writePin+0xc0>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	2c f4       	brge	.+10     	; 0x12ae <GPIO_writePin+0x4e>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <GPIO_writePin+0x68>
    12ac:	bc c0       	rjmp	.+376    	; 0x1426 <GPIO_writePin+0x1c6>
    12ae:	2c 81       	ldd	r18, Y+4	; 0x04
    12b0:	3d 81       	ldd	r19, Y+5	; 0x05
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <GPIO_writePin+0x5a>
    12b8:	5f c0       	rjmp	.+190    	; 0x1378 <GPIO_writePin+0x118>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	91 05       	cpc	r25, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <GPIO_writePin+0x66>
    12c4:	85 c0       	rjmp	.+266    	; 0x13d0 <GPIO_writePin+0x170>
    12c6:	af c0       	rjmp	.+350    	; 0x1426 <GPIO_writePin+0x1c6>
		case 0:
			if (value == LOGIC_LOW) {
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	88 23       	and	r24, r24
    12cc:	a9 f4       	brne	.+42     	; 0x12f8 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA, pin_num); /* clear this pit as it will be low */
    12ce:	ab e3       	ldi	r26, 0x3B	; 59
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <GPIO_writePin+0x8c>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <GPIO_writePin+0x88>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	97 c0       	rjmp	.+302    	; 0x1426 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTA, pin_num); /* Set this pit as it will be high/enable internal pull-up */
    12f8:	ab e3       	ldi	r26, 0x3B	; 59
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	eb e3       	ldi	r30, 0x3B	; 59
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_writePin+0xb6>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_writePin+0xb2>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	83 c0       	rjmp	.+262    	; 0x1426 <GPIO_writePin+0x1c6>
			}
			break;
		case 1:
			if (value == LOGIC_LOW) {
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 23       	and	r24, r24
    1324:	a9 f4       	brne	.+42     	; 0x1350 <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB, pin_num);
    1326:	a8 e3       	ldi	r26, 0x38	; 56
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e8 e3       	ldi	r30, 0x38	; 56
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 2e       	mov	r0, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <GPIO_writePin+0xe4>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <GPIO_writePin+0xe0>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	6b c0       	rjmp	.+214    	; 0x1426 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTB, pin_num);
    1350:	a8 e3       	ldi	r26, 0x38	; 56
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_writePin+0x10e>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_writePin+0x10a>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	57 c0       	rjmp	.+174    	; 0x1426 <GPIO_writePin+0x1c6>
			}
			break;
		case 2:
			if (value == LOGIC_LOW) {
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 23       	and	r24, r24
    137c:	a9 f4       	brne	.+42     	; 0x13a8 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC, pin_num);
    137e:	a5 e3       	ldi	r26, 0x35	; 53
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e3       	ldi	r30, 0x35	; 53
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <GPIO_writePin+0x13c>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <GPIO_writePin+0x138>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	3f c0       	rjmp	.+126    	; 0x1426 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTC, pin_num);
    13a8:	a5 e3       	ldi	r26, 0x35	; 53
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_writePin+0x166>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_writePin+0x162>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	2b c0       	rjmp	.+86     	; 0x1426 <GPIO_writePin+0x1c6>
			}
			break;
		case 3:
			if (value == LOGIC_LOW) {
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	88 23       	and	r24, r24
    13d4:	a9 f4       	brne	.+42     	; 0x1400 <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD, pin_num);
    13d6:	a2 e3       	ldi	r26, 0x32	; 50
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e2 e3       	ldi	r30, 0x32	; 50
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <GPIO_writePin+0x194>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <GPIO_writePin+0x190>
    13f8:	80 95       	com	r24
    13fa:	84 23       	and	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	13 c0       	rjmp	.+38     	; 0x1426 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTD, pin_num);
    1400:	a2 e3       	ldi	r26, 0x32	; 50
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e2 e3       	ldi	r30, 0x32	; 50
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <GPIO_writePin+0x1be>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <GPIO_writePin+0x1ba>
    1422:	84 2b       	or	r24, r20
    1424:	8c 93       	st	X, r24
		default:
			break;
		}
	}
	return;
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <GPIO_readPin>:

/*
 * read and return the value for the required pin, it should be logic-high or low
 * if the input port_number or pin_number are not valid will return LOGIC_LOW
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <GPIO_readPin+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <GPIO_readPin+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	/* if valid arguments */
	if (port_num >= 0 && port_num <= 3 && pin_num >= 0 && pin_num <= 7) {
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	84 30       	cpi	r24, 0x04	; 4
    144c:	08 f0       	brcs	.+2      	; 0x1450 <GPIO_readPin+0x1a>
    144e:	6c c0       	rjmp	.+216    	; 0x1528 <GPIO_readPin+0xf2>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	88 30       	cpi	r24, 0x08	; 8
    1454:	08 f0       	brcs	.+2      	; 0x1458 <GPIO_readPin+0x22>
    1456:	68 c0       	rjmp	.+208    	; 0x1528 <GPIO_readPin+0xf2>
		/* Choose which port we need to read from it */
		switch (port_num) {
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3d 83       	std	Y+5, r19	; 0x05
    1460:	2c 83       	std	Y+4, r18	; 0x04
    1462:	4c 81       	ldd	r20, Y+4	; 0x04
    1464:	5d 81       	ldd	r21, Y+5	; 0x05
    1466:	41 30       	cpi	r20, 0x01	; 1
    1468:	51 05       	cpc	r21, r1
    146a:	41 f1       	breq	.+80     	; 0x14bc <GPIO_readPin+0x86>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	91 05       	cpc	r25, r1
    1474:	34 f4       	brge	.+12     	; 0x1482 <GPIO_readPin+0x4c>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	21 15       	cp	r18, r1
    147c:	31 05       	cpc	r19, r1
    147e:	61 f0       	breq	.+24     	; 0x1498 <GPIO_readPin+0x62>
    1480:	54 c0       	rjmp	.+168    	; 0x152a <GPIO_readPin+0xf4>
    1482:	4c 81       	ldd	r20, Y+4	; 0x04
    1484:	5d 81       	ldd	r21, Y+5	; 0x05
    1486:	42 30       	cpi	r20, 0x02	; 2
    1488:	51 05       	cpc	r21, r1
    148a:	51 f1       	breq	.+84     	; 0x14e0 <GPIO_readPin+0xaa>
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	91 05       	cpc	r25, r1
    1494:	b9 f1       	breq	.+110    	; 0x1504 <GPIO_readPin+0xce>
    1496:	49 c0       	rjmp	.+146    	; 0x152a <GPIO_readPin+0xf4>
		case 0:
			value = GET_BIT(PINA, pin_num);
    1498:	e9 e3       	ldi	r30, 0x39	; 57
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_readPin+0x7a>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_readPin+0x76>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	37 c0       	rjmp	.+110    	; 0x152a <GPIO_readPin+0xf4>
			break;
		case 1:
			value = GET_BIT(PINB, pin_num);
    14bc:	e6 e3       	ldi	r30, 0x36	; 54
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a9 01       	movw	r20, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <GPIO_readPin+0x9e>
    14d0:	55 95       	asr	r21
    14d2:	47 95       	ror	r20
    14d4:	8a 95       	dec	r24
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <GPIO_readPin+0x9a>
    14d8:	ca 01       	movw	r24, r20
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	25 c0       	rjmp	.+74     	; 0x152a <GPIO_readPin+0xf4>
			break;
		case 2:
			value = GET_BIT(PINC, pin_num);
    14e0:	e3 e3       	ldi	r30, 0x33	; 51
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_readPin+0xc2>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_readPin+0xbe>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	13 c0       	rjmp	.+38     	; 0x152a <GPIO_readPin+0xf4>
			break;
		case 3:
			value = GET_BIT(PIND, pin_num);
    1504:	e0 e3       	ldi	r30, 0x30	; 48
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <GPIO_readPin+0xe6>
    1518:	55 95       	asr	r21
    151a:	47 95       	ror	r20
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <GPIO_readPin+0xe2>
    1520:	ca 01       	movw	r24, r20
    1522:	81 70       	andi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	01 c0       	rjmp	.+2      	; 0x152a <GPIO_readPin+0xf4>
			break;
		default:
			break;
		}
	} else {
		value = 0;
    1528:	19 82       	std	Y+1, r1	; 0x01
	}

	return value;
    152a:	89 81       	ldd	r24, Y+1	; 0x01
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <GPIO_setupPortDirection>:
 * Setuo the direction of the required port for all pins
 * if the direction value is PORT_INPUT all pins in this port should be input pins
 * if the direction value is PORT_OUTPUT all pins in this port should be output pins
 * if the input port_number or pin_number are not valid do nothing
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PinDirectionType direction) {
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <GPIO_setupPortDirection+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_setupPortDirection+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= 0 && port_num <= 3) {
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	90 f5       	brcc	.+100    	; 0x15b6 <GPIO_setupPortDirection+0x7a>
		switch (port_num) {
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3c 83       	std	Y+4, r19	; 0x04
    155a:	2b 83       	std	Y+3, r18	; 0x03
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	d1 f0       	breq	.+52     	; 0x159a <GPIO_setupPortDirection+0x5e>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <GPIO_setupPortDirection+0x3e>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	61 f0       	breq	.+24     	; 0x1590 <GPIO_setupPortDirection+0x54>
    1578:	1e c0       	rjmp	.+60     	; 0x15b6 <GPIO_setupPortDirection+0x7a>
    157a:	2b 81       	ldd	r18, Y+3	; 0x03
    157c:	3c 81       	ldd	r19, Y+4	; 0x04
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	81 f0       	breq	.+32     	; 0x15a4 <GPIO_setupPortDirection+0x68>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	81 f0       	breq	.+32     	; 0x15ae <GPIO_setupPortDirection+0x72>
    158e:	13 c0       	rjmp	.+38     	; 0x15b6 <GPIO_setupPortDirection+0x7a>
		case 0:
			DDRA=direction;
    1590:	ea e3       	ldi	r30, 0x3A	; 58
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	80 83       	st	Z, r24
    1598:	0e c0       	rjmp	.+28     	; 0x15b6 <GPIO_setupPortDirection+0x7a>
			break;
		case 1:
			DDRB=direction;
    159a:	e7 e3       	ldi	r30, 0x37	; 55
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	80 83       	st	Z, r24
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <GPIO_setupPortDirection+0x7a>
			break;
		case 2:
			DDRC=direction;
    15a4:	e4 e3       	ldi	r30, 0x34	; 52
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	80 83       	st	Z, r24
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <GPIO_setupPortDirection+0x7a>
			break;
		case 3:
			DDRD=direction;
    15ae:	e1 e3       	ldi	r30, 0x31	; 49
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	80 83       	st	Z, r24
		default:
			break;
		}
	}
	return;
}
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <GPIO_writePort>:
 * write the value on the required port
 * if any pin in the port is output pin the value will be written
 * if any pin in the port is input pin this will activate/deactivate the internal pull-up resistor
 * if the input port_number or pin_number are not valid do nothing
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <GPIO_writePort+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <GPIO_writePort+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= 0 && port_num <= 3) {
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	84 30       	cpi	r24, 0x04	; 4
    15d8:	90 f5       	brcc	.+100    	; 0x163e <GPIO_writePort+0x7a>
		switch (port_num) {
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3c 83       	std	Y+4, r19	; 0x04
    15e2:	2b 83       	std	Y+3, r18	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	d1 f0       	breq	.+52     	; 0x1622 <GPIO_writePort+0x5e>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	2c f4       	brge	.+10     	; 0x1602 <GPIO_writePort+0x3e>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	61 f0       	breq	.+24     	; 0x1618 <GPIO_writePort+0x54>
    1600:	1e c0       	rjmp	.+60     	; 0x163e <GPIO_writePort+0x7a>
    1602:	2b 81       	ldd	r18, Y+3	; 0x03
    1604:	3c 81       	ldd	r19, Y+4	; 0x04
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	81 f0       	breq	.+32     	; 0x162c <GPIO_writePort+0x68>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	81 f0       	breq	.+32     	; 0x1636 <GPIO_writePort+0x72>
    1616:	13 c0       	rjmp	.+38     	; 0x163e <GPIO_writePort+0x7a>
		case 0:
			PORTA = value;
    1618:	eb e3       	ldi	r30, 0x3B	; 59
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	80 83       	st	Z, r24
    1620:	0e c0       	rjmp	.+28     	; 0x163e <GPIO_writePort+0x7a>
			break;
		case 1:
			PORTB = value;
    1622:	e8 e3       	ldi	r30, 0x38	; 56
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	80 83       	st	Z, r24
    162a:	09 c0       	rjmp	.+18     	; 0x163e <GPIO_writePort+0x7a>
			break;
		case 2:
			PORTC = value;
    162c:	e5 e3       	ldi	r30, 0x35	; 53
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	80 83       	st	Z, r24
    1634:	04 c0       	rjmp	.+8      	; 0x163e <GPIO_writePort+0x7a>
			break;
		case 3:
			PORTD = value;
    1636:	e2 e3       	ldi	r30, 0x32	; 50
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	80 83       	st	Z, r24
		default:
			break;
		}
	}
	return;
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <GPIO_readPort>:
/*
 * read and return the value of the required port
 * if the input port_number or pin_number are not valid return ZERO
 */

uint8 GPIO_readPort(uint8 port_num) {
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <GPIO_readPort+0x6>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <GPIO_readPort+0x8>
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if (port_num >= 0 && port_num <= 3) {
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	98 f5       	brcc	.+102    	; 0x16c6 <GPIO_readPort+0x7a>
		switch (port_num) {
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	2b 83       	std	Y+3, r18	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	d1 f0       	breq	.+52     	; 0x16a8 <GPIO_readPort+0x5c>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <GPIO_readPort+0x3c>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <GPIO_readPort+0x52>
    1686:	20 c0       	rjmp	.+64     	; 0x16c8 <GPIO_readPort+0x7c>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	81 f0       	breq	.+32     	; 0x16b2 <GPIO_readPort+0x66>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	81 f0       	breq	.+32     	; 0x16bc <GPIO_readPort+0x70>
    169c:	15 c0       	rjmp	.+42     	; 0x16c8 <GPIO_readPort+0x7c>
		case 0:
			value = PINA;
    169e:	e9 e3       	ldi	r30, 0x39	; 57
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	10 c0       	rjmp	.+32     	; 0x16c8 <GPIO_readPort+0x7c>
			break;
		case 1:
			value = PINB;
    16a8:	e6 e3       	ldi	r30, 0x36	; 54
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <GPIO_readPort+0x7c>
			break;
		case 2:
			value = PINC;
    16b2:	e3 e3       	ldi	r30, 0x33	; 51
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <GPIO_readPort+0x7c>
			break;
		case 3:
			value = PIND;
    16bc:	e0 e3       	ldi	r30, 0x30	; 48
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	89 83       	std	Y+1, r24	; 0x01
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <GPIO_readPort+0x7c>
			break;
		default:
			break;
		}
	} else {
		value = 0;
    16c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <main>:

void secondsCounter(void);

uint16 seconds;

int main() {
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	ec 97       	sbiw	r28, 0x3c	; 60
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61

	uint8 current_operation, idx, byte, error_flag = 0, password[5],
    16f0:	1f 86       	std	Y+15, r1	; 0x0f
			password_confirmation[5];
	TWI_ConfigType twi = { 400000, 1 };
    16f2:	ce 01       	movw	r24, r28
    16f4:	4d 96       	adiw	r24, 0x1d	; 29
    16f6:	9f a7       	std	Y+47, r25	; 0x2f
    16f8:	8e a7       	std	Y+46, r24	; 0x2e
    16fa:	e4 e7       	ldi	r30, 0x74	; 116
    16fc:	f1 e0       	ldi	r31, 0x01	; 1
    16fe:	f9 ab       	std	Y+49, r31	; 0x31
    1700:	e8 ab       	std	Y+48, r30	; 0x30
    1702:	f5 e0       	ldi	r31, 0x05	; 5
    1704:	fa ab       	std	Y+50, r31	; 0x32
    1706:	e8 a9       	ldd	r30, Y+48	; 0x30
    1708:	f9 a9       	ldd	r31, Y+49	; 0x31
    170a:	00 80       	ld	r0, Z
    170c:	88 a9       	ldd	r24, Y+48	; 0x30
    170e:	99 a9       	ldd	r25, Y+49	; 0x31
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	99 ab       	std	Y+49, r25	; 0x31
    1714:	88 ab       	std	Y+48, r24	; 0x30
    1716:	ee a5       	ldd	r30, Y+46	; 0x2e
    1718:	ff a5       	ldd	r31, Y+47	; 0x2f
    171a:	00 82       	st	Z, r0
    171c:	8e a5       	ldd	r24, Y+46	; 0x2e
    171e:	9f a5       	ldd	r25, Y+47	; 0x2f
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	9f a7       	std	Y+47, r25	; 0x2f
    1724:	8e a7       	std	Y+46, r24	; 0x2e
    1726:	9a a9       	ldd	r25, Y+50	; 0x32
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	9a ab       	std	Y+50, r25	; 0x32
    172c:	ea a9       	ldd	r30, Y+50	; 0x32
    172e:	ee 23       	and	r30, r30
    1730:	51 f7       	brne	.-44     	; 0x1706 <main+0x2e>
	Timer1_ConfigType timer1 = { 0, 31250, TIMER1_FRQ256, TIMER1_CTC };
    1732:	ce 01       	movw	r24, r28
    1734:	82 96       	adiw	r24, 0x22	; 34
    1736:	9c ab       	std	Y+52, r25	; 0x34
    1738:	8b ab       	std	Y+51, r24	; 0x33
    173a:	ee e6       	ldi	r30, 0x6E	; 110
    173c:	f1 e0       	ldi	r31, 0x01	; 1
    173e:	fe ab       	std	Y+54, r31	; 0x36
    1740:	ed ab       	std	Y+53, r30	; 0x35
    1742:	f6 e0       	ldi	r31, 0x06	; 6
    1744:	ff ab       	std	Y+55, r31	; 0x37
    1746:	ed a9       	ldd	r30, Y+53	; 0x35
    1748:	fe a9       	ldd	r31, Y+54	; 0x36
    174a:	00 80       	ld	r0, Z
    174c:	8d a9       	ldd	r24, Y+53	; 0x35
    174e:	9e a9       	ldd	r25, Y+54	; 0x36
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	9e ab       	std	Y+54, r25	; 0x36
    1754:	8d ab       	std	Y+53, r24	; 0x35
    1756:	eb a9       	ldd	r30, Y+51	; 0x33
    1758:	fc a9       	ldd	r31, Y+52	; 0x34
    175a:	00 82       	st	Z, r0
    175c:	8b a9       	ldd	r24, Y+51	; 0x33
    175e:	9c a9       	ldd	r25, Y+52	; 0x34
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	9c ab       	std	Y+52, r25	; 0x34
    1764:	8b ab       	std	Y+51, r24	; 0x33
    1766:	9f a9       	ldd	r25, Y+55	; 0x37
    1768:	91 50       	subi	r25, 0x01	; 1
    176a:	9f ab       	std	Y+55, r25	; 0x37
    176c:	ef a9       	ldd	r30, Y+55	; 0x37
    176e:	ee 23       	and	r30, r30
    1770:	51 f7       	brne	.-44     	; 0x1746 <main+0x6e>
	UART_ConfigType uart = { INTERRUPT_DISABLE, EVEN_PARITY, ONE_BIT, EIGHT_BIT,
			BAUD_RATE_9600 };
    1772:	ce 01       	movw	r24, r28
    1774:	88 96       	adiw	r24, 0x28	; 40
    1776:	99 af       	std	Y+57, r25	; 0x39
    1778:	88 af       	std	Y+56, r24	; 0x38
    177a:	e8 e6       	ldi	r30, 0x68	; 104
    177c:	f1 e0       	ldi	r31, 0x01	; 1
    177e:	fb af       	std	Y+59, r31	; 0x3b
    1780:	ea af       	std	Y+58, r30	; 0x3a
    1782:	f6 e0       	ldi	r31, 0x06	; 6
    1784:	fc af       	std	Y+60, r31	; 0x3c
    1786:	ea ad       	ldd	r30, Y+58	; 0x3a
    1788:	fb ad       	ldd	r31, Y+59	; 0x3b
    178a:	00 80       	ld	r0, Z
    178c:	8a ad       	ldd	r24, Y+58	; 0x3a
    178e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	9b af       	std	Y+59, r25	; 0x3b
    1794:	8a af       	std	Y+58, r24	; 0x3a
    1796:	e8 ad       	ldd	r30, Y+56	; 0x38
    1798:	f9 ad       	ldd	r31, Y+57	; 0x39
    179a:	00 82       	st	Z, r0
    179c:	88 ad       	ldd	r24, Y+56	; 0x38
    179e:	99 ad       	ldd	r25, Y+57	; 0x39
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	99 af       	std	Y+57, r25	; 0x39
    17a4:	88 af       	std	Y+56, r24	; 0x38
    17a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    17a8:	91 50       	subi	r25, 0x01	; 1
    17aa:	9c af       	std	Y+60, r25	; 0x3c
    17ac:	ec ad       	ldd	r30, Y+60	; 0x3c
    17ae:	ee 23       	and	r30, r30
    17b0:	51 f7       	brne	.-44     	; 0x1786 <main+0xae>

	sei();
    17b2:	78 94       	sei

	Timer1_init(&timer1);
    17b4:	ce 01       	movw	r24, r28
    17b6:	82 96       	adiw	r24, 0x22	; 34
    17b8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Timer1_init>
	Timer1_setCallBack(secondsCounter);
    17bc:	8e e3       	ldi	r24, 0x3E	; 62
    17be:	9d e0       	ldi	r25, 0x0D	; 13
    17c0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Timer1_setCallBack>
	UART_init(&uart);
    17c4:	ce 01       	movw	r24, r28
    17c6:	88 96       	adiw	r24, 0x28	; 40
    17c8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <UART_init>
	TWI_init(&twi);
    17cc:	ce 01       	movw	r24, r28
    17ce:	4d 96       	adiw	r24, 0x1d	; 29
    17d0:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TWI_init>
	DcMotor_Init();
    17d4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <DcMotor_Init>
	Buzzer_init();
    17d8:	0e 94 75 07 	call	0xeea	; 0xeea <Buzzer_init>

	while (1) {
		current_operation = UART_recieveByte();
    17dc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <UART_recieveByte>
    17e0:	89 8b       	std	Y+17, r24	; 0x11

		if (current_operation == UART_SEND_PASS_FLAG || current_operation == UART_CONFIRM_PASS_FLAG) {
    17e2:	89 89       	ldd	r24, Y+17	; 0x11
    17e4:	84 30       	cpi	r24, 0x04	; 4
    17e6:	19 f0       	breq	.+6      	; 0x17ee <main+0x116>
    17e8:	89 89       	ldd	r24, Y+17	; 0x11
    17ea:	85 30       	cpi	r24, 0x05	; 5
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <main+0x13e>
			for (idx = 0; idx < 5; idx++) {
    17ee:	18 8a       	std	Y+16, r1	; 0x10
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <main+0x138>
				password[idx] = UART_recieveByte();
    17f2:	88 89       	ldd	r24, Y+16	; 0x10
    17f4:	08 2f       	mov	r16, r24
    17f6:	10 e0       	ldi	r17, 0x00	; 0
    17f8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <UART_recieveByte>
    17fc:	28 2f       	mov	r18, r24
    17fe:	ce 01       	movw	r24, r28
    1800:	43 96       	adiw	r24, 0x13	; 19
    1802:	fc 01       	movw	r30, r24
    1804:	e0 0f       	add	r30, r16
    1806:	f1 1f       	adc	r31, r17
    1808:	20 83       	st	Z, r18

	while (1) {
		current_operation = UART_recieveByte();

		if (current_operation == UART_SEND_PASS_FLAG || current_operation == UART_CONFIRM_PASS_FLAG) {
			for (idx = 0; idx < 5; idx++) {
    180a:	88 89       	ldd	r24, Y+16	; 0x10
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	88 8b       	std	Y+16, r24	; 0x10
    1810:	88 89       	ldd	r24, Y+16	; 0x10
    1812:	85 30       	cpi	r24, 0x05	; 5
    1814:	70 f3       	brcs	.-36     	; 0x17f2 <main+0x11a>
				password[idx] = UART_recieveByte();
			}

		}

		if (current_operation == UART_SEND_PASS_FLAG) {
    1816:	89 89       	ldd	r24, Y+17	; 0x11
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	09 f0       	breq	.+2      	; 0x181e <main+0x146>
    181c:	49 c0       	rjmp	.+146    	; 0x18b0 <main+0x1d8>
			for (idx = 0; idx < 5; idx++) {
    181e:	18 8a       	std	Y+16, r1	; 0x10
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <main+0x168>
				password_confirmation[idx] = UART_recieveByte();
    1822:	88 89       	ldd	r24, Y+16	; 0x10
    1824:	08 2f       	mov	r16, r24
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	0e 94 69 10 	call	0x20d2	; 0x20d2 <UART_recieveByte>
    182c:	28 2f       	mov	r18, r24
    182e:	ce 01       	movw	r24, r28
    1830:	48 96       	adiw	r24, 0x18	; 24
    1832:	fc 01       	movw	r30, r24
    1834:	e0 0f       	add	r30, r16
    1836:	f1 1f       	adc	r31, r17
    1838:	20 83       	st	Z, r18
			}

		}

		if (current_operation == UART_SEND_PASS_FLAG) {
			for (idx = 0; idx < 5; idx++) {
    183a:	88 89       	ldd	r24, Y+16	; 0x10
    183c:	8f 5f       	subi	r24, 0xFF	; 255
    183e:	88 8b       	std	Y+16, r24	; 0x10
    1840:	88 89       	ldd	r24, Y+16	; 0x10
    1842:	85 30       	cpi	r24, 0x05	; 5
    1844:	70 f3       	brcs	.-36     	; 0x1822 <main+0x14a>
				password_confirmation[idx] = UART_recieveByte();
			}

			error_flag = 0;
    1846:	1f 86       	std	Y+15, r1	; 0x0f
			for (idx = 0; idx < 5; idx++) {
    1848:	18 8a       	std	Y+16, r1	; 0x10
    184a:	19 c0       	rjmp	.+50     	; 0x187e <main+0x1a6>
				if (password_confirmation[idx] != password[idx])
    184c:	88 89       	ldd	r24, Y+16	; 0x10
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	48 96       	adiw	r24, 0x18	; 24
    1856:	fc 01       	movw	r30, r24
    1858:	e2 0f       	add	r30, r18
    185a:	f3 1f       	adc	r31, r19
    185c:	40 81       	ld	r20, Z
    185e:	88 89       	ldd	r24, Y+16	; 0x10
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	ce 01       	movw	r24, r28
    1866:	43 96       	adiw	r24, 0x13	; 19
    1868:	fc 01       	movw	r30, r24
    186a:	e2 0f       	add	r30, r18
    186c:	f3 1f       	adc	r31, r19
    186e:	80 81       	ld	r24, Z
    1870:	48 17       	cp	r20, r24
    1872:	11 f0       	breq	.+4      	; 0x1878 <main+0x1a0>
					error_flag = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	8f 87       	std	Y+15, r24	; 0x0f
			for (idx = 0; idx < 5; idx++) {
				password_confirmation[idx] = UART_recieveByte();
			}

			error_flag = 0;
			for (idx = 0; idx < 5; idx++) {
    1878:	88 89       	ldd	r24, Y+16	; 0x10
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	88 8b       	std	Y+16, r24	; 0x10
    187e:	88 89       	ldd	r24, Y+16	; 0x10
    1880:	85 30       	cpi	r24, 0x05	; 5
    1882:	20 f3       	brcs	.-56     	; 0x184c <main+0x174>
				if (password_confirmation[idx] != password[idx])
					error_flag = 1;
			}

			UART_sendByte(UART_READY);
    1884:	88 e0       	ldi	r24, 0x08	; 8
    1886:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
			if (error_flag) {
    188a:	8f 85       	ldd	r24, Y+15	; 0x0f
    188c:	88 23       	and	r24, r24
    188e:	21 f0       	breq	.+8      	; 0x1898 <main+0x1c0>
				UART_sendByte(FAILURE);
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
    1896:	a2 cf       	rjmp	.-188    	; 0x17dc <main+0x104>
			} else {
				UART_sendByte(SUCCESS);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
				EEPROM_writeByte(0, password);
    189e:	9e 01       	movw	r18, r28
    18a0:	2d 5e       	subi	r18, 0xED	; 237
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	b9 01       	movw	r22, r18
    18aa:	0e 94 99 07 	call	0xf32	; 0xf32 <EEPROM_writeByte>
    18ae:	96 cf       	rjmp	.-212    	; 0x17dc <main+0x104>
			}

		} else if (current_operation == UART_CONFIRM_PASS_FLAG) {
    18b0:	89 89       	ldd	r24, Y+17	; 0x11
    18b2:	85 30       	cpi	r24, 0x05	; 5
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <main+0x1e0>
    18b6:	a1 c0       	rjmp	.+322    	; 0x19fa <main+0x322>

			error_flag = 0;
    18b8:	1f 86       	std	Y+15, r1	; 0x0f
			for (idx = 0; idx < 5; idx++) {
    18ba:	18 8a       	std	Y+16, r1	; 0x10
    18bc:	8c c0       	rjmp	.+280    	; 0x19d6 <main+0x2fe>
				EEPROM_readByte(idx, &byte);
    18be:	88 89       	ldd	r24, Y+16	; 0x10
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9e 01       	movw	r18, r28
    18c6:	2e 5e       	subi	r18, 0xEE	; 238
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	b9 01       	movw	r22, r18
    18cc:	0e 94 ed 07 	call	0xfda	; 0xfda <EEPROM_readByte>
				if (byte != password[idx]) {
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	ce 01       	movw	r24, r28
    18d8:	43 96       	adiw	r24, 0x13	; 19
    18da:	fc 01       	movw	r30, r24
    18dc:	e2 0f       	add	r30, r18
    18de:	f3 1f       	adc	r31, r19
    18e0:	90 81       	ld	r25, Z
    18e2:	8a 89       	ldd	r24, Y+18	; 0x12
    18e4:	98 17       	cp	r25, r24
    18e6:	11 f0       	breq	.+4      	; 0x18ec <main+0x214>
					error_flag = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	8f 87       	std	Y+15, r24	; 0x0f
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e2       	ldi	r26, 0x20	; 32
    18f2:	b1 e4       	ldi	r27, 0x41	; 65
    18f4:	8b 87       	std	Y+11, r24	; 0x0b
    18f6:	9c 87       	std	Y+12, r25	; 0x0c
    18f8:	ad 87       	std	Y+13, r26	; 0x0d
    18fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a ef       	ldi	r20, 0xFA	; 250
    190a:	54 e4       	ldi	r21, 0x44	; 68
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8f 83       	std	Y+7, r24	; 0x07
    1916:	98 87       	std	Y+8, r25	; 0x08
    1918:	a9 87       	std	Y+9, r26	; 0x09
    191a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <main+0x266>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	3f c0       	rjmp	.+126    	; 0x19bc <main+0x2e4>
	else if (__tmp > 65535)
    193e:	6f 81       	ldd	r22, Y+7	; 0x07
    1940:	78 85       	ldd	r23, Y+8	; 0x08
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	4c f5       	brge	.+82     	; 0x19a8 <main+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	6b 85       	ldd	r22, Y+11	; 0x0b
    1958:	7c 85       	ldd	r23, Y+12	; 0x0c
    195a:	8d 85       	ldd	r24, Y+13	; 0x0d
    195c:	9e 85       	ldd	r25, Y+14	; 0x0e
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	0f c0       	rjmp	.+30     	; 0x199e <main+0x2c6>
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9c 83       	std	Y+4, r25	; 0x04
    1986:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <main+0x2b4>
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	69 f7       	brne	.-38     	; 0x1980 <main+0x2a8>
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <main+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	8d 83       	std	Y+5, r24	; 0x05
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	9e 81       	ldd	r25, Y+6	; 0x06
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <main+0x2f0>
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
			}

		} else if (current_operation == UART_CONFIRM_PASS_FLAG) {

			error_flag = 0;
			for (idx = 0; idx < 5; idx++) {
    19d0:	88 89       	ldd	r24, Y+16	; 0x10
    19d2:	8f 5f       	subi	r24, 0xFF	; 255
    19d4:	88 8b       	std	Y+16, r24	; 0x10
    19d6:	88 89       	ldd	r24, Y+16	; 0x10
    19d8:	85 30       	cpi	r24, 0x05	; 5
    19da:	08 f4       	brcc	.+2      	; 0x19de <main+0x306>
    19dc:	70 cf       	rjmp	.-288    	; 0x18be <main+0x1e6>
					error_flag = 1;
				}
				_delay_ms(10);
			}

			UART_sendByte(UART_READY);
    19de:	88 e0       	ldi	r24, 0x08	; 8
    19e0:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
			if (error_flag) {
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	88 23       	and	r24, r24
    19e8:	21 f0       	breq	.+8      	; 0x19f2 <main+0x31a>
				UART_sendByte(FAILURE);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
    19f0:	f5 ce       	rjmp	.-534    	; 0x17dc <main+0x104>
			} else {
				UART_sendByte(SUCCESS);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
    19f8:	f1 ce       	rjmp	.-542    	; 0x17dc <main+0x104>
			}

		} else if (current_operation == UART_OPEN_DOOR_FLAG) {
    19fa:	89 89       	ldd	r24, Y+17	; 0x11
    19fc:	86 30       	cpi	r24, 0x06	; 6
    19fe:	51 f5       	brne	.+84     	; 0x1a54 <main+0x37c>
			seconds = 0;
    1a00:	10 92 7f 01 	sts	0x017F, r1
    1a04:	10 92 7e 01 	sts	0x017E, r1

			DcMotor_Rotate(CW, 100);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	64 e6       	ldi	r22, 0x64	; 100
    1a0c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <DcMotor_Rotate>
			while (seconds < 15);
    1a10:	80 91 7e 01 	lds	r24, 0x017E
    1a14:	90 91 7f 01 	lds	r25, 0x017F
    1a18:	8f 30       	cpi	r24, 0x0F	; 15
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	c8 f3       	brcs	.-14     	; 0x1a10 <main+0x338>

			DcMotor_Rotate(STOP, 0);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <DcMotor_Rotate>
			while (seconds < 18);
    1a26:	80 91 7e 01 	lds	r24, 0x017E
    1a2a:	90 91 7f 01 	lds	r25, 0x017F
    1a2e:	82 31       	cpi	r24, 0x12	; 18
    1a30:	91 05       	cpc	r25, r1
    1a32:	c8 f3       	brcs	.-14     	; 0x1a26 <main+0x34e>

			DcMotor_Rotate(ACW, 100);
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	64 e6       	ldi	r22, 0x64	; 100
    1a38:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <DcMotor_Rotate>
			while (seconds < 33);
    1a3c:	80 91 7e 01 	lds	r24, 0x017E
    1a40:	90 91 7f 01 	lds	r25, 0x017F
    1a44:	81 32       	cpi	r24, 0x21	; 33
    1a46:	91 05       	cpc	r25, r1
    1a48:	c8 f3       	brcs	.-14     	; 0x1a3c <main+0x364>

			DcMotor_Rotate(STOP, 0);
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <DcMotor_Rotate>
    1a52:	c4 ce       	rjmp	.-632    	; 0x17dc <main+0x104>
		} else if (current_operation == UART_PASS_UNMATCH) {
    1a54:	89 89       	ldd	r24, Y+17	; 0x11
    1a56:	87 30       	cpi	r24, 0x07	; 7
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <main+0x384>
    1a5a:	c0 ce       	rjmp	.-640    	; 0x17dc <main+0x104>
			seconds = 0;
    1a5c:	10 92 7f 01 	sts	0x017F, r1
    1a60:	10 92 7e 01 	sts	0x017E, r1
			Buzzer_on();
    1a64:	0e 94 81 07 	call	0xf02	; 0xf02 <Buzzer_on>
			while (seconds < 60);
    1a68:	80 91 7e 01 	lds	r24, 0x017E
    1a6c:	90 91 7f 01 	lds	r25, 0x017F
    1a70:	8c 33       	cpi	r24, 0x3C	; 60
    1a72:	91 05       	cpc	r25, r1
    1a74:	c8 f3       	brcs	.-14     	; 0x1a68 <main+0x390>
			Buzzer_off();
    1a76:	0e 94 8d 07 	call	0xf1a	; 0xf1a <Buzzer_off>
    1a7a:	b0 ce       	rjmp	.-672    	; 0x17dc <main+0x104>

00001a7c <secondsCounter>:
		}
	}
}

void secondsCounter(void) {
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    1a84:	80 91 7e 01 	lds	r24, 0x017E
    1a88:	90 91 7f 01 	lds	r25, 0x017F
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	90 93 7f 01 	sts	0x017F, r25
    1a92:	80 93 7e 01 	sts	0x017E, r24
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <DcMotor_Init>:
/* 	Description
 * 	-The Function responsible for setup the direction for the two
 *			motor pins through the GPIO driver.
 *	-Stop at the DC-Motor at the beginning through the GPIO driver
*/
void DcMotor_Init(void){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
	/* configuration of IN1 and IN2 pins as output pins */
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_setupPinDirection>

	/* stop the motor */
	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <DcMotor_Rotate>:
 * 	-The function responsible for rotate the DC Motor CW/ or A-CW or
 *			stop the motor based on the state input state value.
 * 	-Send the required duty cycle to the PWM driver based on the
 *			required speed value.
*/
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <DcMotor_Rotate+0x6>
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <PWM_Timer0_Start>
	if(state==CW){
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	59 f4       	brne	.+22     	; 0x1b02 <DcMotor_Rotate+0x30>
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	41 e0       	ldi	r20, 0x01	; 1
    1af2:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	61 e0       	ldi	r22, 0x01	; 1
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
    1b00:	18 c0       	rjmp	.+48     	; 0x1b32 <DcMotor_Rotate+0x60>
	}else if(state==ACW){
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	82 30       	cpi	r24, 0x02	; 2
    1b06:	59 f4       	brne	.+22     	; 0x1b1e <DcMotor_Rotate+0x4c>
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
    1b1c:	0a c0       	rjmp	.+20     	; 0x1b32 <DcMotor_Rotate+0x60>
	}else {
		GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_writePin>
	}
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <PWM_Timer0_Start>:
 * -Setup the compare value based on the required input duty cycle
 * -Setup the direction for OC0 as output pin through the GPIO driver.
 * -The generated PWM signal frequency will be 500Hz to control the DC
 *		Motor speed.
*/
void PWM_Timer0_Start(uint8 duty_cycle){
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	0f 92       	push	r0
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	89 83       	std	Y+1, r24	; 0x01
	 * WGM01=WGM00=1 	fast PWM
	 * COM01=1 			(nin-inverting mode)
	 * CS01=1			Setup the prescaler with F_CPU/8.
	 */

	TCCR0 =(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS01);
    1b4c:	e3 e5       	ldi	r30, 0x53	; 83
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8a e6       	ldi	r24, 0x6A	; 106
    1b52:	80 83       	st	Z, r24

	/* configure oc0 as output pin */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	63 e0       	ldi	r22, 0x03	; 3
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_setupPinDirection>

	/* setup the speed of motor  */
	OCR0=(duty_cycle/100.0)*255;
    1b5e:	0c e5       	ldi	r16, 0x5C	; 92
    1b60:	10 e0       	ldi	r17, 0x00	; 0
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	aa 27       	eor	r26, r26
    1b6a:	97 fd       	sbrc	r25, 7
    1b6c:	a0 95       	com	r26
    1b6e:	ba 2f       	mov	r27, r26
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	cd 01       	movw	r24, r26
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	48 ec       	ldi	r20, 0xC8	; 200
    1b86:	52 e4       	ldi	r21, 0x42	; 66
    1b88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	53 e4       	ldi	r21, 0x43	; 67
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24
}
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	08 95       	ret

00001bc0 <__vector_7>:
#include<avr/io.h>
#include<avr/interrupt.h>

volatile static void (*g_ptr)(void)=NULL;

ISR(TIMER1_COMPA_vect){
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	2f 93       	push	r18
    1bcc:	3f 93       	push	r19
    1bce:	4f 93       	push	r20
    1bd0:	5f 93       	push	r21
    1bd2:	6f 93       	push	r22
    1bd4:	7f 93       	push	r23
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	af 93       	push	r26
    1bdc:	bf 93       	push	r27
    1bde:	ef 93       	push	r30
    1be0:	ff 93       	push	r31
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
    1bea:	80 91 7a 01 	lds	r24, 0x017A
    1bee:	90 91 7b 01 	lds	r25, 0x017B
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	29 f0       	breq	.+10     	; 0x1c00 <__vector_7+0x40>
		g_ptr();
    1bf6:	e0 91 7a 01 	lds	r30, 0x017A
    1bfa:	f0 91 7b 01 	lds	r31, 0x017B
    1bfe:	09 95       	icall
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	bf 91       	pop	r27
    1c0a:	af 91       	pop	r26
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	7f 91       	pop	r23
    1c12:	6f 91       	pop	r22
    1c14:	5f 91       	pop	r21
    1c16:	4f 91       	pop	r20
    1c18:	3f 91       	pop	r19
    1c1a:	2f 91       	pop	r18
    1c1c:	0f 90       	pop	r0
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	0f 90       	pop	r0
    1c22:	1f 90       	pop	r1
    1c24:	18 95       	reti

00001c26 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1c26:	1f 92       	push	r1
    1c28:	0f 92       	push	r0
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	0f 92       	push	r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	2f 93       	push	r18
    1c32:	3f 93       	push	r19
    1c34:	4f 93       	push	r20
    1c36:	5f 93       	push	r21
    1c38:	6f 93       	push	r22
    1c3a:	7f 93       	push	r23
    1c3c:	8f 93       	push	r24
    1c3e:	9f 93       	push	r25
    1c40:	af 93       	push	r26
    1c42:	bf 93       	push	r27
    1c44:	ef 93       	push	r30
    1c46:	ff 93       	push	r31
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
    1c50:	80 91 7a 01 	lds	r24, 0x017A
    1c54:	90 91 7b 01 	lds	r25, 0x017B
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	29 f0       	breq	.+10     	; 0x1c66 <__vector_9+0x40>
		g_ptr();
    1c5c:	e0 91 7a 01 	lds	r30, 0x017A
    1c60:	f0 91 7b 01 	lds	r31, 0x017B
    1c64:	09 95       	icall
}
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	ff 91       	pop	r31
    1c6c:	ef 91       	pop	r30
    1c6e:	bf 91       	pop	r27
    1c70:	af 91       	pop	r26
    1c72:	9f 91       	pop	r25
    1c74:	8f 91       	pop	r24
    1c76:	7f 91       	pop	r23
    1c78:	6f 91       	pop	r22
    1c7a:	5f 91       	pop	r21
    1c7c:	4f 91       	pop	r20
    1c7e:	3f 91       	pop	r19
    1c80:	2f 91       	pop	r18
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	0f 90       	pop	r0
    1c88:	1f 90       	pop	r1
    1c8a:	18 95       	reti

00001c8c <Timer1_init>:

/*
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <Timer1_init+0x6>
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
	/* non PWM mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    1c9a:	ef e4       	ldi	r30, 0x4F	; 79
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	8c e0       	ldi	r24, 0x0C	; 12
    1ca0:	80 83       	st	Z, r24

	/* clear modes */
	TCCR1B &= ~(3 << WGM12);
    1ca2:	ae e4       	ldi	r26, 0x4E	; 78
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	ee e4       	ldi	r30, 0x4E	; 78
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	87 7e       	andi	r24, 0xE7	; 231
    1cae:	8c 93       	st	X, r24

	/* required mode ctc or normal mode */
	if (Config_Ptr->mode == TIMER1_CTC) {
    1cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb4:	85 81       	ldd	r24, Z+5	; 0x05
    1cb6:	88 23       	and	r24, r24
    1cb8:	b9 f4       	brne	.+46     	; 0x1ce8 <Timer1_init+0x5c>
		OCR1A = Config_Ptr->compare_value;
    1cba:	aa e4       	ldi	r26, 0x4A	; 74
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	11 96       	adiw	r26, 0x01	; 1
    1cc8:	9c 93       	st	X, r25
    1cca:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B, WGM12);
    1ccc:	ae e4       	ldi	r26, 0x4E	; 78
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ee e4       	ldi	r30, 0x4E	; 78
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 60       	ori	r24, 0x08	; 8
    1cd8:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
    1cda:	a9 e5       	ldi	r26, 0x59	; 89
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e9 e5       	ldi	r30, 0x59	; 89
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	80 61       	ori	r24, 0x10	; 16
    1ce6:	8c 93       	st	X, r24
	}
	/* set the initial counter for timer */
	TCNT1 = Config_Ptr->initial_value;
    1ce8:	ac e4       	ldi	r26, 0x4C	; 76
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e9 81       	ldd	r30, Y+1	; 0x01
    1cee:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	11 96       	adiw	r26, 0x01	; 1
    1cf6:	9c 93       	st	X, r25
    1cf8:	8e 93       	st	-X, r24

	/* configure timer 1 prescaler and start it  */
	TCCR1B = (TCCR1B & 0xf8) | (Config_Ptr->prescaler);
    1cfa:	ae e4       	ldi	r26, 0x4E	; 78
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	ee e4       	ldi	r30, 0x4E	; 78
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	98 2f       	mov	r25, r24
    1d06:	98 7f       	andi	r25, 0xF8	; 248
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	84 81       	ldd	r24, Z+4	; 0x04
    1d0e:	89 2b       	or	r24, r25
    1d10:	8c 93       	st	X, r24

}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <Timer1_deInit>:

/*
 * Function to disable the Timer1
 */
void Timer1_deInit(void){
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1d24:	ef e4       	ldi	r30, 0x4F	; 79
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	10 82       	st	Z, r1
	TCCR1B &= ~(3 << WGM12);
    1d2a:	ae e4       	ldi	r26, 0x4E	; 78
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ee e4       	ldi	r30, 0x4E	; 78
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	87 7e       	andi	r24, 0xE7	; 231
    1d36:	8c 93       	st	X, r24
	TCCR1B &= 0xf8;
    1d38:	ae e4       	ldi	r26, 0x4E	; 78
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ee e4       	ldi	r30, 0x4E	; 78
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 7f       	andi	r24, 0xF8	; 248
    1d44:	8c 93       	st	X, r24
}
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <Timer1_setCallBack>:

/*
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <Timer1_setCallBack+0x6>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=a_ptr;
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	90 93 7b 01 	sts	0x017B, r25
    1d62:	80 93 7a 01 	sts	0x017A, r24
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <TWI_init>:
 *	set TWPS to 00
 *	configure division factor for the bit rate generator
 *	give the address of slave
 *	enable module
 */
void TWI_init(const TWI_ConfigType* configuration) {
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <TWI_init+0xa>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
	/* set TWPS to 00 */
	TWSR = 0;
    1d82:	e1 e2       	ldi	r30, 0x21	; 33
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	10 82       	st	Z, r1

	/* configure division factor for the bit rate generator */
	TWBR = (uint8)((F_CPU/(float64)(2*configuration->bit_rate))-8);
    1d88:	00 e2       	ldi	r16, 0x20	; 32
    1d8a:	10 e0       	ldi	r17, 0x00	; 0
    1d8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	a2 81       	ldd	r26, Z+2	; 0x02
    1d96:	b3 81       	ldd	r27, Z+3	; 0x03
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	aa 1f       	adc	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1da8:	9b 01       	movw	r18, r22
    1daa:	ac 01       	movw	r20, r24
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	74 e2       	ldi	r23, 0x24	; 36
    1db0:	84 ef       	ldi	r24, 0xF4	; 244
    1db2:	9a e4       	ldi	r25, 0x4A	; 74
    1db4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 83       	st	Z, r24

	/* give the address of slave */
	TWAR = configuration->address;
    1de0:	a2 e2       	ldi	r26, 0x22	; 34
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e9 81       	ldd	r30, Y+1	; 0x01
    1de6:	fa 81       	ldd	r31, Y+2	; 0x02
    1de8:	84 81       	ldd	r24, Z+4	; 0x04
    1dea:	8c 93       	st	X, r24

	/* enable module */
	TWCR = (1 << TWEN);
    1dec:	e6 e5       	ldi	r30, 0x56	; 86
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	80 83       	st	Z, r24
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	1f 91       	pop	r17
    1dfe:	0f 91       	pop	r16
    1e00:	08 95       	ret

00001e02 <TWI_start>:

/*
 * send start bit to start the communication
 */
void TWI_start(void) {
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
	/*
	 * clear interrupt flag
	 * send start bit
	 * enable module
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1e0a:	e6 e5       	ldi	r30, 0x56	; 86
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	84 ea       	ldi	r24, 0xA4	; 164
    1e10:	80 83       	st	Z, r24

	/* waiting until (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1e12:	e6 e5       	ldi	r30, 0x56	; 86
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	88 23       	and	r24, r24
    1e1a:	dc f7       	brge	.-10     	; 0x1e12 <TWI_start+0x10>
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <TWI_stop>:

/*
 * send stop bit to end the communication
 */
void TWI_stop(void) {
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	/*
	 * clear interrupt flag
	 * send end bit
	 * enable module
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1e2a:	e6 e5       	ldi	r30, 0x56	; 86
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	84 e9       	ldi	r24, 0x94	; 148
    1e30:	80 83       	st	Z, r24
	/* if u make polling here it will stuck because hardware willn't recieve any action after sending stop bit */
}
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <TWI_writeByte>:

/*
 * send byte in SDA
 */
void TWI_writeByte(uint8 data) {
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	89 83       	std	Y+1, r24	; 0x01
	/* write data into data register */
	TWDR = data;
    1e44:	e3 e2       	ldi	r30, 0x23	; 35
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	80 83       	st	Z, r24

	/*
	 * clear interrupt flag
	 * enable module
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e4c:	e6 e5       	ldi	r30, 0x56	; 86
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	84 e8       	ldi	r24, 0x84	; 132
    1e52:	80 83       	st	Z, r24

	/* waiting until data send successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1e54:	e6 e5       	ldi	r30, 0x56	; 86
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 23       	and	r24, r24
    1e5c:	dc f7       	brge	.-10     	; 0x1e54 <TWI_writeByte+0x1c>
}
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <TWI_readByteWithACK>:

/*
 * -read one byte
 * -send ACK
 */
uint8 TWI_readByteWithACK(void) {
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62

	/*
	 * clear interrupt flag
	 * enable module
	 */
	TWCR = (1 << TWINT)  | (1 << TWEN);
    1e70:	e6 e5       	ldi	r30, 0x56	; 86
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	84 e8       	ldi	r24, 0x84	; 132
    1e76:	80 83       	st	Z, r24

	/* waiting until we recieve byte */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1e78:	e6 e5       	ldi	r30, 0x56	; 86
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 23       	and	r24, r24
    1e80:	dc f7       	brge	.-10     	; 0x1e78 <TWI_readByteWithACK+0x12>

	data=TWDR;
    1e82:	e3 e2       	ldi	r30, 0x23	; 35
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	89 83       	std	Y+1, r24	; 0x01

	/* send ACK and enable TWI and clear the flag */
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
    1e8a:	e6 e5       	ldi	r30, 0x56	; 86
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	84 ec       	ldi	r24, 0xC4	; 196
    1e90:	80 83       	st	Z, r24

	/* waiting until ACK send successfully */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1e92:	e6 e5       	ldi	r30, 0x56	; 86
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	88 23       	and	r24, r24
    1e9a:	dc f7       	brge	.-10     	; 0x1e92 <TWI_readByteWithACK+0x2c>

	return data;
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <TWI_readByteWithNACK>:

/*
 * -read one byte
 * -send NACK to end the communication
 */
uint8 TWI_readByteWithNACK(void) {
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62

	/*
	 * clear interrupt flag
	 * enable module
	 */
	TWCR = (1 << TWINT)  | (1 << TWEN);
    1eae:	e6 e5       	ldi	r30, 0x56	; 86
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	84 e8       	ldi	r24, 0x84	; 132
    1eb4:	80 83       	st	Z, r24

	/* waiting until we recieve byte */
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1eb6:	e6 e5       	ldi	r30, 0x56	; 86
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	88 23       	and	r24, r24
    1ebe:	dc f7       	brge	.-10     	; 0x1eb6 <TWI_readByteWithNACK+0x10>

	return TWDR;
    1ec0:	e3 e2       	ldi	r30, 0x23	; 35
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
}
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <TWI_getStatus>:

/*
 * get the status to confirm the action
 */
uint8 TWI_getStatus(void) {
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & (0xf8));
    1ed4:	e1 e2       	ldi	r30, 0x21	; 33
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 7f       	andi	r24, 0xF8	; 248
}
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <__vector_13>:
#include<avr/io.h>
#include<avr/interrupt.h>

static volatile void (*g_ptr)(uint8)=0;

ISR(USART_RXC_vect){
    1ee2:	1f 92       	push	r1
    1ee4:	0f 92       	push	r0
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	0f 92       	push	r0
    1eea:	11 24       	eor	r1, r1
    1eec:	2f 93       	push	r18
    1eee:	3f 93       	push	r19
    1ef0:	4f 93       	push	r20
    1ef2:	5f 93       	push	r21
    1ef4:	6f 93       	push	r22
    1ef6:	7f 93       	push	r23
    1ef8:	8f 93       	push	r24
    1efa:	9f 93       	push	r25
    1efc:	af 93       	push	r26
    1efe:	bf 93       	push	r27
    1f00:	ef 93       	push	r30
    1f02:	ff 93       	push	r31
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=0){
    1f0c:	80 91 7c 01 	lds	r24, 0x017C
    1f10:	90 91 7d 01 	lds	r25, 0x017D
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	41 f0       	breq	.+16     	; 0x1f28 <__vector_13+0x46>
		g_ptr(UDR);
    1f18:	e0 91 7c 01 	lds	r30, 0x017C
    1f1c:	f0 91 7d 01 	lds	r31, 0x017D
    1f20:	ac e2       	ldi	r26, 0x2C	; 44
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	8c 91       	ld	r24, X
    1f26:	09 95       	icall
	}
}
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	ff 91       	pop	r31
    1f2e:	ef 91       	pop	r30
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	0f 90       	pop	r0
    1f4a:	1f 90       	pop	r1
    1f4c:	18 95       	reti

00001f4e <UART_init>:

/*
 * initialization for UART Driver
 * set RX interrupt or polling as req
 */
void UART_init(const UART_ConfigType *configuration) {
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <UART_init+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <UART_init+0x8>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	9c 83       	std	Y+4, r25	; 0x04
    1f5c:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = 0;
    1f5e:	eb e2       	ldi	r30, 0x2B	; 43
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	10 82       	st	Z, r1

	/* reduce the divisor of the baud rate divider from 16 to 8 */
	SET_BIT(UCSRA, U2X);
    1f64:	ab e2       	ldi	r26, 0x2B	; 43
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	eb e2       	ldi	r30, 0x2B	; 43
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	82 60       	ori	r24, 0x02	; 2
    1f70:	8c 93       	st	X, r24

	/* set RX interrupt or polling as required */
	MAKE_BIT(UCSRB, RXCIE, configuration->RX_completeInerrupt);
    1f72:	aa e2       	ldi	r26, 0x2A	; 42
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	ea e2       	ldi	r30, 0x2A	; 42
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	2f 77       	andi	r18, 0x7F	; 127
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	80 81       	ld	r24, Z
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	96 95       	lsr	r25
    1f8c:	98 2f       	mov	r25, r24
    1f8e:	88 27       	eor	r24, r24
    1f90:	97 95       	ror	r25
    1f92:	87 95       	ror	r24
    1f94:	82 2b       	or	r24, r18
    1f96:	8c 93       	st	X, r24

	/* enable rx and tx */
	SET_BIT(UCSRB, RXEN);
    1f98:	aa e2       	ldi	r26, 0x2A	; 42
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	ea e2       	ldi	r30, 0x2A	; 42
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	80 61       	ori	r24, 0x10	; 16
    1fa4:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    1fa6:	aa e2       	ldi	r26, 0x2A	; 42
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	ea e2       	ldi	r30, 0x2A	; 42
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	88 60       	ori	r24, 0x08	; 8
    1fb2:	8c 93       	st	X, r24

	/* set this bit to write into UCSRC */
	SET_BIT(UCSRC, URSEL);
    1fb4:	a0 e4       	ldi	r26, 0x40	; 64
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e0 e4       	ldi	r30, 0x40	; 64
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 68       	ori	r24, 0x80	; 128
    1fc0:	8c 93       	st	X, r24

	/* set error parity as required */
	UCSRC = (UCSRC & 0xcf) | (configuration->parity << 4);
    1fc2:	a0 e4       	ldi	r26, 0x40	; 64
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e0 e4       	ldi	r30, 0x40	; 64
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	28 2f       	mov	r18, r24
    1fce:	2f 7c       	andi	r18, 0xCF	; 207
    1fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd4:	81 81       	ldd	r24, Z+1	; 0x01
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	82 95       	swap	r24
    1fdc:	92 95       	swap	r25
    1fde:	90 7f       	andi	r25, 0xF0	; 240
    1fe0:	98 27       	eor	r25, r24
    1fe2:	80 7f       	andi	r24, 0xF0	; 240
    1fe4:	98 27       	eor	r25, r24
    1fe6:	82 2b       	or	r24, r18
    1fe8:	8c 93       	st	X, r24

	/* set stop bit as required */
	MAKE_BIT(UCSRC, USBS, configuration->stop_bit);
    1fea:	a0 e4       	ldi	r26, 0x40	; 64
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e0 e4       	ldi	r30, 0x40	; 64
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	27 7f       	andi	r18, 0xF7	; 247
    1ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    1ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	82 2b       	or	r24, r18
    2010:	8c 93       	st	X, r24

	/* set data BITs */
	UCSRC = (UCSRC & 0xf9) | ((configuration->bit_data & 3) << 1);
    2012:	a0 e4       	ldi	r26, 0x40	; 64
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e0 e4       	ldi	r30, 0x40	; 64
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	28 2f       	mov	r18, r24
    201e:	29 7f       	andi	r18, 0xF9	; 249
    2020:	eb 81       	ldd	r30, Y+3	; 0x03
    2022:	fc 81       	ldd	r31, Y+4	; 0x04
    2024:	83 81       	ldd	r24, Z+3	; 0x03
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	83 70       	andi	r24, 0x03	; 3
    202c:	90 70       	andi	r25, 0x00	; 0
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	82 2b       	or	r24, r18
    2034:	8c 93       	st	X, r24

	/* set baud rate as required */
	UBRRL=0;
    2036:	e9 e2       	ldi	r30, 0x29	; 41
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	10 82       	st	Z, r1
	uint16 baudRate = F_CPU / (8UL * configuration->baud_rate) - 1;
    203c:	eb 81       	ldd	r30, Y+3	; 0x03
    203e:	fc 81       	ldd	r31, Y+4	; 0x04
    2040:	84 81       	ldd	r24, Z+4	; 0x04
    2042:	95 81       	ldd	r25, Z+5	; 0x05
    2044:	cc 01       	movw	r24, r24
    2046:	a0 e0       	ldi	r26, 0x00	; 0
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	aa 1f       	adc	r26, r26
    2050:	bb 1f       	adc	r27, r27
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	aa 1f       	adc	r26, r26
    2058:	bb 1f       	adc	r27, r27
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	aa 1f       	adc	r26, r26
    2060:	bb 1f       	adc	r27, r27
    2062:	9c 01       	movw	r18, r24
    2064:	ad 01       	movw	r20, r26
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	92 e1       	ldi	r25, 0x12	; 18
    206a:	aa e7       	ldi	r26, 0x7A	; 122
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <__udivmodsi4>
    2076:	da 01       	movw	r26, r20
    2078:	c9 01       	movw	r24, r18
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=(baudRate&0x00ff);
    2080:	e9 e2       	ldi	r30, 0x29	; 41
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	80 83       	st	Z, r24
	UBRRH=baudRate>>8;
    2088:	e0 e4       	ldi	r30, 0x40	; 64
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	89 2f       	mov	r24, r25
    2092:	99 27       	eor	r25, r25
    2094:	80 83       	st	Z, r24
}
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <UART_sendByte>:

/*
 * send data using UART serial communication
 */
void UART_sendByte(uint8 data) {
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE));
    20b0:	eb e2       	ldi	r30, 0x2B	; 43
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	80 72       	andi	r24, 0x20	; 32
    20bc:	90 70       	andi	r25, 0x00	; 0
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	b9 f3       	breq	.-18     	; 0x20b0 <UART_sendByte+0xc>
	UDR = data;
    20c2:	ec e2       	ldi	r30, 0x2C	; 44
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	80 83       	st	Z, r24
}
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <UART_recieveByte>:

/*
 * recieve data form UART using polling method
 */
uint8 UART_recieveByte() {
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC));
    20da:	eb e2       	ldi	r30, 0x2B	; 43
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	88 23       	and	r24, r24
    20e2:	dc f7       	brge	.-10     	; 0x20da <UART_recieveByte+0x8>
	SET_BIT(UCSRA,RXC);
    20e4:	ab e2       	ldi	r26, 0x2B	; 43
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	eb e2       	ldi	r30, 0x2B	; 43
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 68       	ori	r24, 0x80	; 128
    20f0:	8c 93       	st	X, r24
	return UDR;
    20f2:	ec e2       	ldi	r30, 0x2C	; 44
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <UART_sendString>:

/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <UART_sendString+0x6>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <UART_sendString+0x24>
	while (*str != '\0') {
		UART_sendByte(*str);
    210e:	e9 81       	ldd	r30, Y+1	; 0x01
    2110:	fa 81       	ldd	r31, Y+2	; 0x02
    2112:	80 81       	ld	r24, Z
    2114:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
		str++;
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
	while (*str != '\0') {
    2122:	e9 81       	ldd	r30, Y+1	; 0x01
    2124:	fa 81       	ldd	r31, Y+2	; 0x02
    2126:	80 81       	ld	r24, Z
    2128:	88 23       	and	r24, r24
    212a:	89 f7       	brne	.-30     	; 0x210e <UART_sendString+0x10>
		UART_sendByte(*str);
		str++;
	}
	UART_sendByte('#');
    212c:	83 e2       	ldi	r24, 0x23	; 35
    212e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <UART_sendByte>
}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <UART_recieveString>:

/*
 * recieve string using UART polling msethod
 * warning -> this function should be sync with the sender to avoid overwrite
 */
void UART_recieveString(uint8 *str) {
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <UART_recieveString+0x6>
    2142:	0f 92       	push	r0
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
	do {
		*str = UART_recieveByte();
    214c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <UART_recieveByte>
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	80 83       	st	Z, r24
	} while (*str++ != '#');
    2156:	e9 81       	ldd	r30, Y+1	; 0x01
    2158:	fa 81       	ldd	r31, Y+2	; 0x02
    215a:	80 81       	ld	r24, Z
    215c:	1b 82       	std	Y+3, r1	; 0x03
    215e:	83 32       	cpi	r24, 0x23	; 35
    2160:	11 f0       	breq	.+4      	; 0x2166 <UART_recieveString+0x2a>
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	9a 81       	ldd	r25, Y+2	; 0x02
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	88 23       	and	r24, r24
    2174:	59 f7       	brne	.-42     	; 0x214c <UART_recieveString+0x10>
	*(str - 1) = '\0';
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	9a 81       	ldd	r25, Y+2	; 0x02
    217a:	fc 01       	movw	r30, r24
    217c:	31 97       	sbiw	r30, 0x01	; 1
    217e:	10 82       	st	Z, r1
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <UART_setCallBack>:

/*
 * save the address of callback functiom
 */
void UART_setCallBack(void(*f_ptr)(uint8)){
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <UART_setCallBack+0x6>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=f_ptr;
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	9a 81       	ldd	r25, Y+2	; 0x02
    219e:	90 93 7d 01 	sts	0x017D, r25
    21a2:	80 93 7c 01 	sts	0x017C, r24
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <__udivmodsi4>:
    21b0:	a1 e2       	ldi	r26, 0x21	; 33
    21b2:	1a 2e       	mov	r1, r26
    21b4:	aa 1b       	sub	r26, r26
    21b6:	bb 1b       	sub	r27, r27
    21b8:	fd 01       	movw	r30, r26
    21ba:	0d c0       	rjmp	.+26     	; 0x21d6 <__udivmodsi4_ep>

000021bc <__udivmodsi4_loop>:
    21bc:	aa 1f       	adc	r26, r26
    21be:	bb 1f       	adc	r27, r27
    21c0:	ee 1f       	adc	r30, r30
    21c2:	ff 1f       	adc	r31, r31
    21c4:	a2 17       	cp	r26, r18
    21c6:	b3 07       	cpc	r27, r19
    21c8:	e4 07       	cpc	r30, r20
    21ca:	f5 07       	cpc	r31, r21
    21cc:	20 f0       	brcs	.+8      	; 0x21d6 <__udivmodsi4_ep>
    21ce:	a2 1b       	sub	r26, r18
    21d0:	b3 0b       	sbc	r27, r19
    21d2:	e4 0b       	sbc	r30, r20
    21d4:	f5 0b       	sbc	r31, r21

000021d6 <__udivmodsi4_ep>:
    21d6:	66 1f       	adc	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	88 1f       	adc	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	1a 94       	dec	r1
    21e0:	69 f7       	brne	.-38     	; 0x21bc <__udivmodsi4_loop>
    21e2:	60 95       	com	r22
    21e4:	70 95       	com	r23
    21e6:	80 95       	com	r24
    21e8:	90 95       	com	r25
    21ea:	9b 01       	movw	r18, r22
    21ec:	ac 01       	movw	r20, r24
    21ee:	bd 01       	movw	r22, r26
    21f0:	cf 01       	movw	r24, r30
    21f2:	08 95       	ret

000021f4 <__prologue_saves__>:
    21f4:	2f 92       	push	r2
    21f6:	3f 92       	push	r3
    21f8:	4f 92       	push	r4
    21fa:	5f 92       	push	r5
    21fc:	6f 92       	push	r6
    21fe:	7f 92       	push	r7
    2200:	8f 92       	push	r8
    2202:	9f 92       	push	r9
    2204:	af 92       	push	r10
    2206:	bf 92       	push	r11
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	ca 1b       	sub	r28, r26
    221e:	db 0b       	sbc	r29, r27
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
    222a:	09 94       	ijmp

0000222c <__epilogue_restores__>:
    222c:	2a 88       	ldd	r2, Y+18	; 0x12
    222e:	39 88       	ldd	r3, Y+17	; 0x11
    2230:	48 88       	ldd	r4, Y+16	; 0x10
    2232:	5f 84       	ldd	r5, Y+15	; 0x0f
    2234:	6e 84       	ldd	r6, Y+14	; 0x0e
    2236:	7d 84       	ldd	r7, Y+13	; 0x0d
    2238:	8c 84       	ldd	r8, Y+12	; 0x0c
    223a:	9b 84       	ldd	r9, Y+11	; 0x0b
    223c:	aa 84       	ldd	r10, Y+10	; 0x0a
    223e:	b9 84       	ldd	r11, Y+9	; 0x09
    2240:	c8 84       	ldd	r12, Y+8	; 0x08
    2242:	df 80       	ldd	r13, Y+7	; 0x07
    2244:	ee 80       	ldd	r14, Y+6	; 0x06
    2246:	fd 80       	ldd	r15, Y+5	; 0x05
    2248:	0c 81       	ldd	r16, Y+4	; 0x04
    224a:	1b 81       	ldd	r17, Y+3	; 0x03
    224c:	aa 81       	ldd	r26, Y+2	; 0x02
    224e:	b9 81       	ldd	r27, Y+1	; 0x01
    2250:	ce 0f       	add	r28, r30
    2252:	d1 1d       	adc	r29, r1
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	ed 01       	movw	r28, r26
    2260:	08 95       	ret

00002262 <_exit>:
    2262:	f8 94       	cli

00002264 <__stop_program>:
    2264:	ff cf       	rjmp	.-2      	; 0x2264 <__stop_program>
