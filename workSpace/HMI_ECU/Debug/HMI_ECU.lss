
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00002994  00002a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000f6  008000f6  00002abe  2**0
                  ALLOC
  3 .stab         00002748  00000000  00000000  00002ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ab  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000066f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006863  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009397  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a144  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3f       	cpi	r26, 0xFC	; 252
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <main>
      8a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
/*
 * setup pin direction input/output pin
 * if the input port_number or pin_number are not valid do nothing
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/* if valid arguments */
	if (port_num >= 0 && port_num <= 3 && pin_num >= 0 && pin_num <= 7) {
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Choose which port we need to configure it */
		switch (port_num) {
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		case 0:
			if (direction == PIN_INPUT) {
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	88 23       	and	r24, r24
     bb2:	a9 f4       	brne	.+42     	; 0xbde <GPIO_setupPinDirection+0x98>
				CLEAR_BIT(DDRA, pin_num); /* clear this pit as it will be INPUT */
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	97 c0       	rjmp	.+302    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRA, pin_num); /* Set this pit as it will be OUTPUT */
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <GPIO_setupPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <GPIO_setupPinDirection+0xb2>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case 1:
			if (direction == PIN_INPUT) {
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	88 23       	and	r24, r24
     c0a:	a9 f4       	brne	.+42     	; 0xc36 <GPIO_setupPinDirection+0xf0>
				CLEAR_BIT(DDRB, pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	80 95       	com	r24
     c30:	84 23       	and	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	6b c0       	rjmp	.+214    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRB, pin_num);
     c36:	a7 e3       	ldi	r26, 0x37	; 55
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e7 e3       	ldi	r30, 0x37	; 55
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <GPIO_setupPinDirection+0x10e>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <GPIO_setupPinDirection+0x10a>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case 2:
			if (direction == PIN_INPUT) {
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 23       	and	r24, r24
     c62:	a9 f4       	brne	.+42     	; 0xc8e <GPIO_setupPinDirection+0x148>
				CLEAR_BIT(DDRC, pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRC, pin_num);
     c8e:	a4 e3       	ldi	r26, 0x34	; 52
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e4 e3       	ldi	r30, 0x34	; 52
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <GPIO_setupPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <GPIO_setupPinDirection+0x162>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case 3:
			if (direction == PIN_INPUT) {
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	88 23       	and	r24, r24
     cba:	a9 f4       	brne	.+42     	; 0xce6 <GPIO_setupPinDirection+0x1a0>
				CLEAR_BIT(DDRD, pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	13 c0       	rjmp	.+38     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			} else {
				SET_BIT(DDRD, pin_num);
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <GPIO_setupPinDirection+0x1be>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <GPIO_setupPinDirection+0x1ba>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
		default:
			break;
		}
	}
	return;
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
/*
 * Write logic value on the required pin
 * if the input port_number or pin_number are not valid do nothing
 * if the pin is input, it will enable/disable internal pull-up
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/* if valid arguments */
	if (port_num >= 0 && port_num <= 3 && pin_num >= 0 && pin_num <= 7) {
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Choose which port we need to write on it */
		switch (port_num) {
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		case 0:
			if (value == LOGIC_LOW) {
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	a9 f4       	brne	.+42     	; 0xdb4 <GPIO_writePin+0x98>
				CLEAR_BIT(PORTA, pin_num); /* clear this pit as it will be low */
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	97 c0       	rjmp	.+302    	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTA, pin_num); /* Set this pit as it will be high/enable internal pull-up */
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <GPIO_writePin+0xb6>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <GPIO_writePin+0xb2>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case 1:
			if (value == LOGIC_LOW) {
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	88 23       	and	r24, r24
     de0:	a9 f4       	brne	.+42     	; 0xe0c <GPIO_writePin+0xf0>
				CLEAR_BIT(PORTB, pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	6b c0       	rjmp	.+214    	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTB, pin_num);
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <GPIO_writePin+0x10e>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <GPIO_writePin+0x10a>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case 2:
			if (value == LOGIC_LOW) {
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 23       	and	r24, r24
     e38:	a9 f4       	brne	.+42     	; 0xe64 <GPIO_writePin+0x148>
				CLEAR_BIT(PORTC, pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTC, pin_num);
     e64:	a5 e3       	ldi	r26, 0x35	; 53
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_writePin+0x166>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_writePin+0x162>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case 3:
			if (value == LOGIC_LOW) {
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 23       	and	r24, r24
     e90:	a9 f4       	brne	.+42     	; 0xebc <GPIO_writePin+0x1a0>
				CLEAR_BIT(PORTD, pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	13 c0       	rjmp	.+38     	; 0xee2 <GPIO_writePin+0x1c6>
			} else {
				SET_BIT(PORTD, pin_num);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <GPIO_writePin+0x1be>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <GPIO_writePin+0x1ba>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
		default:
			break;
		}
	}
	return;
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:

/*
 * read and return the value for the required pin, it should be logic-high or low
 * if the input port_number or pin_number are not valid will return LOGIC_LOW
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	/* if valid arguments */
	if (port_num >= 0 && port_num <= 3 && pin_num >= 0 && pin_num <= 7) {
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	84 30       	cpi	r24, 0x04	; 4
     f08:	08 f0       	brcs	.+2      	; 0xf0c <GPIO_readPin+0x1a>
     f0a:	6c c0       	rjmp	.+216    	; 0xfe4 <GPIO_readPin+0xf2>
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 30       	cpi	r24, 0x08	; 8
     f10:	08 f0       	brcs	.+2      	; 0xf14 <GPIO_readPin+0x22>
     f12:	68 c0       	rjmp	.+208    	; 0xfe4 <GPIO_readPin+0xf2>
		/* Choose which port we need to read from it */
		switch (port_num) {
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3d 83       	std	Y+5, r19	; 0x05
     f1c:	2c 83       	std	Y+4, r18	; 0x04
     f1e:	4c 81       	ldd	r20, Y+4	; 0x04
     f20:	5d 81       	ldd	r21, Y+5	; 0x05
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	41 f1       	breq	.+80     	; 0xf78 <GPIO_readPin+0x86>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	61 f0       	breq	.+24     	; 0xf54 <GPIO_readPin+0x62>
     f3c:	54 c0       	rjmp	.+168    	; 0xfe6 <GPIO_readPin+0xf4>
     f3e:	4c 81       	ldd	r20, Y+4	; 0x04
     f40:	5d 81       	ldd	r21, Y+5	; 0x05
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	51 f1       	breq	.+84     	; 0xf9c <GPIO_readPin+0xaa>
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	9d 81       	ldd	r25, Y+5	; 0x05
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	b9 f1       	breq	.+110    	; 0xfc0 <GPIO_readPin+0xce>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
		case 0:
			value = GET_BIT(PINA, pin_num);
     f54:	e9 e3       	ldi	r30, 0x39	; 57
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a9 01       	movw	r20, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <GPIO_readPin+0x7a>
     f68:	55 95       	asr	r21
     f6a:	47 95       	ror	r20
     f6c:	8a 95       	dec	r24
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <GPIO_readPin+0x76>
     f70:	ca 01       	movw	r24, r20
     f72:	81 70       	andi	r24, 0x01	; 1
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	37 c0       	rjmp	.+110    	; 0xfe6 <GPIO_readPin+0xf4>
			break;
		case 1:
			value = GET_BIT(PINB, pin_num);
     f78:	e6 e3       	ldi	r30, 0x36	; 54
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_readPin+0x9e>
     f8c:	55 95       	asr	r21
     f8e:	47 95       	ror	r20
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_readPin+0x9a>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	25 c0       	rjmp	.+74     	; 0xfe6 <GPIO_readPin+0xf4>
			break;
		case 2:
			value = GET_BIT(PINC, pin_num);
     f9c:	e3 e3       	ldi	r30, 0x33	; 51
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a9 01       	movw	r20, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <GPIO_readPin+0xc2>
     fb0:	55 95       	asr	r21
     fb2:	47 95       	ror	r20
     fb4:	8a 95       	dec	r24
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <GPIO_readPin+0xbe>
     fb8:	ca 01       	movw	r24, r20
     fba:	81 70       	andi	r24, 0x01	; 1
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	13 c0       	rjmp	.+38     	; 0xfe6 <GPIO_readPin+0xf4>
			break;
		case 3:
			value = GET_BIT(PIND, pin_num);
     fc0:	e0 e3       	ldi	r30, 0x30	; 48
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_readPin+0xe6>
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_readPin+0xe2>
     fdc:	ca 01       	movw	r24, r20
     fde:	81 70       	andi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <GPIO_readPin+0xf4>
			break;
		default:
			break;
		}
	} else {
		value = 0;
     fe4:	19 82       	std	Y+1, r1	; 0x01
	}

	return value;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <GPIO_setupPortDirection>:
 * Setuo the direction of the required port for all pins
 * if the direction value is PORT_INPUT all pins in this port should be input pins
 * if the direction value is PORT_OUTPUT all pins in this port should be output pins
 * if the input port_number or pin_number are not valid do nothing
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PinDirectionType direction) {
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <GPIO_setupPortDirection+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <GPIO_setupPortDirection+0x8>
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= 0 && port_num <= 3) {
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	84 30       	cpi	r24, 0x04	; 4
    100c:	90 f5       	brcc	.+100    	; 0x1072 <GPIO_setupPortDirection+0x7a>
		switch (port_num) {
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3c 83       	std	Y+4, r19	; 0x04
    1016:	2b 83       	std	Y+3, r18	; 0x03
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	d1 f0       	breq	.+52     	; 0x1056 <GPIO_setupPortDirection+0x5e>
    1022:	2b 81       	ldd	r18, Y+3	; 0x03
    1024:	3c 81       	ldd	r19, Y+4	; 0x04
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	2c f4       	brge	.+10     	; 0x1036 <GPIO_setupPortDirection+0x3e>
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	61 f0       	breq	.+24     	; 0x104c <GPIO_setupPortDirection+0x54>
    1034:	1e c0       	rjmp	.+60     	; 0x1072 <GPIO_setupPortDirection+0x7a>
    1036:	2b 81       	ldd	r18, Y+3	; 0x03
    1038:	3c 81       	ldd	r19, Y+4	; 0x04
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	81 f0       	breq	.+32     	; 0x1060 <GPIO_setupPortDirection+0x68>
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	81 f0       	breq	.+32     	; 0x106a <GPIO_setupPortDirection+0x72>
    104a:	13 c0       	rjmp	.+38     	; 0x1072 <GPIO_setupPortDirection+0x7a>
		case 0:
			DDRA=direction;
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	80 83       	st	Z, r24
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <GPIO_setupPortDirection+0x7a>
			break;
		case 1:
			DDRB=direction;
    1056:	e7 e3       	ldi	r30, 0x37	; 55
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	80 83       	st	Z, r24
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <GPIO_setupPortDirection+0x7a>
			break;
		case 2:
			DDRC=direction;
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	80 83       	st	Z, r24
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <GPIO_setupPortDirection+0x7a>
			break;
		case 3:
			DDRD=direction;
    106a:	e1 e3       	ldi	r30, 0x31	; 49
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	80 83       	st	Z, r24
		default:
			break;
		}
	}
	return;
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <GPIO_writePort>:
 * write the value on the required port
 * if any pin in the port is output pin the value will be written
 * if any pin in the port is input pin this will activate/deactivate the internal pull-up resistor
 * if the input port_number or pin_number are not valid do nothing
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_writePort+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <GPIO_writePort+0x8>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
	if (port_num >= 0 && port_num <= 3) {
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	90 f5       	brcc	.+100    	; 0x10fa <GPIO_writePort+0x7a>
		switch (port_num) {
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3c 83       	std	Y+4, r19	; 0x04
    109e:	2b 83       	std	Y+3, r18	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	d1 f0       	breq	.+52     	; 0x10de <GPIO_writePort+0x5e>
    10aa:	2b 81       	ldd	r18, Y+3	; 0x03
    10ac:	3c 81       	ldd	r19, Y+4	; 0x04
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <GPIO_writePort+0x3e>
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <GPIO_writePort+0x54>
    10bc:	1e c0       	rjmp	.+60     	; 0x10fa <GPIO_writePort+0x7a>
    10be:	2b 81       	ldd	r18, Y+3	; 0x03
    10c0:	3c 81       	ldd	r19, Y+4	; 0x04
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <GPIO_writePort+0x68>
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	91 05       	cpc	r25, r1
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <GPIO_writePort+0x72>
    10d2:	13 c0       	rjmp	.+38     	; 0x10fa <GPIO_writePort+0x7a>
		case 0:
			PORTA = value;
    10d4:	eb e3       	ldi	r30, 0x3B	; 59
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	80 83       	st	Z, r24
    10dc:	0e c0       	rjmp	.+28     	; 0x10fa <GPIO_writePort+0x7a>
			break;
		case 1:
			PORTB = value;
    10de:	e8 e3       	ldi	r30, 0x38	; 56
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	80 83       	st	Z, r24
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <GPIO_writePort+0x7a>
			break;
		case 2:
			PORTC = value;
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	80 83       	st	Z, r24
    10f0:	04 c0       	rjmp	.+8      	; 0x10fa <GPIO_writePort+0x7a>
			break;
		case 3:
			PORTD = value;
    10f2:	e2 e3       	ldi	r30, 0x32	; 50
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	80 83       	st	Z, r24
		default:
			break;
		}
	}
	return;
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <GPIO_readPort>:
/*
 * read and return the value of the required port
 * if the input port_number or pin_number are not valid return ZERO
 */

uint8 GPIO_readPort(uint8 port_num) {
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <GPIO_readPort+0x6>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <GPIO_readPort+0x8>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if (port_num >= 0 && port_num <= 3) {
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	98 f5       	brcc	.+102    	; 0x1182 <GPIO_readPort+0x7a>
		switch (port_num) {
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3c 83       	std	Y+4, r19	; 0x04
    1124:	2b 83       	std	Y+3, r18	; 0x03
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	d1 f0       	breq	.+52     	; 0x1164 <GPIO_readPort+0x5c>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	3c 81       	ldd	r19, Y+4	; 0x04
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	2c f4       	brge	.+10     	; 0x1144 <GPIO_readPort+0x3c>
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	61 f0       	breq	.+24     	; 0x115a <GPIO_readPort+0x52>
    1142:	20 c0       	rjmp	.+64     	; 0x1184 <GPIO_readPort+0x7c>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	81 f0       	breq	.+32     	; 0x116e <GPIO_readPort+0x66>
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	81 f0       	breq	.+32     	; 0x1178 <GPIO_readPort+0x70>
    1158:	15 c0       	rjmp	.+42     	; 0x1184 <GPIO_readPort+0x7c>
		case 0:
			value = PINA;
    115a:	e9 e3       	ldi	r30, 0x39	; 57
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	10 c0       	rjmp	.+32     	; 0x1184 <GPIO_readPort+0x7c>
			break;
		case 1:
			value = PINB;
    1164:	e6 e3       	ldi	r30, 0x36	; 54
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <GPIO_readPort+0x7c>
			break;
		case 2:
			value = PINC;
    116e:	e3 e3       	ldi	r30, 0x33	; 51
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <GPIO_readPort+0x7c>
			break;
		case 3:
			value = PIND;
    1178:	e0 e3       	ldi	r30, 0x30	; 48
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <GPIO_readPort+0x7c>
			break;
		default:
			break;
		}
	} else {
		value = 0;
    1182:	19 82       	std	Y+1, r1	; 0x01
	}
	return value;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <KEYPAD_init>:
#include "keypad.h"
#include "gpio.h"
#include <util/delay.h>

/* configure all pins as input */
static void KEYPAD_init(void) {
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <KEYPAD_init+0x6>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
	int i;
	/* pull up resistors */
	GPIO_writePort(PORTA_ID, PORT_OUTPUT);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePort>
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    11a6:	1a 82       	std	Y+2, r1	; 0x02
    11a8:	19 82       	std	Y+1, r1	; 0x01
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <KEYPAD_init+0x2e>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+i, PIN_INPUT);
    11ac:	99 81       	ldd	r25, Y+1	; 0x01
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	69 2f       	mov	r22, r25
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
/* configure all pins as input */
static void KEYPAD_init(void) {
	int i;
	/* pull up resistors */
	GPIO_writePort(PORTA_ID, PORT_OUTPUT);
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	91 05       	cpc	r25, r1
    11ca:	84 f3       	brlt	.-32     	; 0x11ac <KEYPAD_init+0x18>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+i, PIN_INPUT);
	}
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    11cc:	1a 82       	std	Y+2, r1	; 0x02
    11ce:	19 82       	std	Y+1, r1	; 0x01
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <KEYPAD_init+0x58>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_FIRST_PIN_ID+i, PIN_INPUT);
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	98 2f       	mov	r25, r24
    11d6:	9c 5f       	subi	r25, 0xFC	; 252
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	69 2f       	mov	r22, r25
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/* pull up resistors */
	GPIO_writePort(PORTA_ID, PORT_OUTPUT);
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+i, PIN_INPUT);
	}
	for (i = 0; i < KEYPAD_ROW_NUMBER; i++) {
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	91 05       	cpc	r25, r1
    11f4:	74 f3       	brlt	.-36     	; 0x11d2 <KEYPAD_init+0x3e>
		GPIO_setupPinDirection(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_FIRST_PIN_ID+i, PIN_INPUT);
	}
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <KEYPAD_4x4_adjustKeyNumber>:
#endif

/* adjust key numbers for 4x3 keypad */
#if KEYPAD_COLUMN_NUMBER==4
#ifndef KEYPAD_STANDARD
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 number_pressed){
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if (number_pressed % 4 == 0) {
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	83 70       	andi	r24, 0x03	; 3
    1214:	90 70       	andi	r25, 0x00	; 0
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	a9 f4       	brne	.+42     	; 0x1244 <KEYPAD_4x4_adjustKeyNumber+0x44>
		if (number_pressed == 4) {
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	19 f4       	brne	.+6      	; 0x1226 <KEYPAD_4x4_adjustKeyNumber+0x26>
			value = '/';
    1220:	8f e2       	ldi	r24, 0x2F	; 47
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	35 c0       	rjmp	.+106    	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0x90>
		} else if (number_pressed == 8) {
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	88 30       	cpi	r24, 0x08	; 8
    122a:	19 f4       	brne	.+6      	; 0x1232 <KEYPAD_4x4_adjustKeyNumber+0x32>
			value = '*';
    122c:	8a e2       	ldi	r24, 0x2A	; 42
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	2f c0       	rjmp	.+94     	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0x90>
		} else if (number_pressed == 12) {
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	8c 30       	cpi	r24, 0x0C	; 12
    1236:	19 f4       	brne	.+6      	; 0x123e <KEYPAD_4x4_adjustKeyNumber+0x3e>
			value = '-';
    1238:	8d e2       	ldi	r24, 0x2D	; 45
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	29 c0       	rjmp	.+82     	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0x90>
		} else {
			value = '+';
    123e:	8b e2       	ldi	r24, 0x2B	; 43
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	26 c0       	rjmp	.+76     	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0x90>
		}
	} else if (number_pressed == 13) {
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	8d 30       	cpi	r24, 0x0D	; 13
    1248:	19 f4       	brne	.+6      	; 0x1250 <KEYPAD_4x4_adjustKeyNumber+0x50>
		value = 'C';
    124a:	83 e4       	ldi	r24, 0x43	; 67
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	20 c0       	rjmp	.+64     	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0x90>
	} else if (number_pressed == 14) {
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	8e 30       	cpi	r24, 0x0E	; 14
    1254:	11 f4       	brne	.+4      	; 0x125a <KEYPAD_4x4_adjustKeyNumber+0x5a>
		value = 0;
    1256:	19 82       	std	Y+1, r1	; 0x01
    1258:	1b c0       	rjmp	.+54     	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0x90>
	} else if (number_pressed == 15) {
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	8f 30       	cpi	r24, 0x0F	; 15
    125e:	19 f4       	brne	.+6      	; 0x1266 <KEYPAD_4x4_adjustKeyNumber+0x66>
		value = '=';
    1260:	8d e3       	ldi	r24, 0x3D	; 61
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	15 c0       	rjmp	.+42     	; 0x1290 <KEYPAD_4x4_adjustKeyNumber+0x90>
	} else {
		value = (2 - (number_pressed / 4)) * 3 + number_pressed % 4;
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	86 95       	lsr	r24
    126a:	86 95       	lsr	r24
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	ac 01       	movw	r20, r24
    1276:	42 1b       	sub	r20, r18
    1278:	53 0b       	sbc	r21, r19
    127a:	9a 01       	movw	r18, r20
    127c:	c9 01       	movw	r24, r18
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	82 0f       	add	r24, r18
    1284:	93 1f       	adc	r25, r19
    1286:	98 2f       	mov	r25, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	83 70       	andi	r24, 0x03	; 3
    128c:	89 0f       	add	r24, r25
    128e:	89 83       	std	Y+1, r24	; 0x01
	}
	return value;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <KEYPAD_getPressedKey>:
#endif
#endif

/* get the keypad button pressed */
uint8 KEYPAD_getPressedKey(void) {
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	62 97       	sbiw	r28, 0x12	; 18
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
	int row, col;
	KEYPAD_init();
    12b0:	0e 94 ca 08 	call	0x1194	; 0x1194 <KEYPAD_init>
	while (1) {
		for (row = 0; row < KEYPAD_ROW_NUMBER; row++) {
    12b4:	1a 8a       	std	Y+18, r1	; 0x12
    12b6:	19 8a       	std	Y+17, r1	; 0x11
    12b8:	b4 c0       	rjmp	.+360    	; 0x1422 <KEYPAD_getPressedKey+0x186>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_OUTPUT);
    12ba:	99 89       	ldd	r25, Y+17	; 0x11
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	69 2f       	mov	r22, r25
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, KEYPAD_PRESSED_LOGIC);
    12c6:	99 89       	ldd	r25, Y+17	; 0x11
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	69 2f       	mov	r22, r25
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for (col = 0; col < KEYPAD_COLUMN_NUMBER; col++) {
    12d2:	18 8a       	std	Y+16, r1	; 0x10
    12d4:	1f 86       	std	Y+15, r1	; 0x0f
    12d6:	23 c0       	rjmp	.+70     	; 0x131e <KEYPAD_getPressedKey+0x82>
				if(GPIO_readPin(KEYPAD_COLUMN_PORT_ID, KEYPAD_COLUMN_FIRST_PIN_ID+col)==KEYPAD_PRESSED_LOGIC){
    12d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12da:	98 2f       	mov	r25, r24
    12dc:	9c 5f       	subi	r25, 0xFC	; 252
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	69 2f       	mov	r22, r25
    12e2:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    12e6:	88 23       	and	r24, r24
    12e8:	a9 f4       	brne	.+42     	; 0x1314 <KEYPAD_getPressedKey+0x78>

#ifndef KEYPAD_STANDARD
	#if KEYPAD_COLUMN_NUMBER==3
						return KEYPAD_4x3_adjustKeyNumber(row * KEYPAD_COLUMN_NUMBER + col + 1);
	#else
						return KEYPAD_4x4_adjustKeyNumber(row*KEYPAD_COLUMN_NUMBER+col+1);
    12ea:	89 89       	ldd	r24, Y+17	; 0x11
    12ec:	9a 89       	ldd	r25, Y+18	; 0x12
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	98 2f       	mov	r25, r24
    12f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fa:	89 0f       	add	r24, r25
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	0e 94 00 09 	call	0x1200	; 0x1200 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_INPUT);
			_delay_ms(5);
		}
	}

}
    1302:	62 96       	adiw	r28, 0x12	; 18
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret
		for (row = 0; row < KEYPAD_ROW_NUMBER; row++) {

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, KEYPAD_PRESSED_LOGIC);

			for (col = 0; col < KEYPAD_COLUMN_NUMBER; col++) {
    1314:	8f 85       	ldd	r24, Y+15	; 0x0f
    1316:	98 89       	ldd	r25, Y+16	; 0x10
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	98 8b       	std	Y+16, r25	; 0x10
    131c:	8f 87       	std	Y+15, r24	; 0x0f
    131e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1320:	98 89       	ldd	r25, Y+16	; 0x10
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	91 05       	cpc	r25, r1
    1326:	c4 f2       	brlt	.-80     	; 0x12d8 <KEYPAD_getPressedKey+0x3c>
						return row*KEYPAD_COLUMN_NUMBER+col+1;
#endif
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_INPUT);
    1328:	99 89       	ldd	r25, Y+17	; 0x11
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	69 2f       	mov	r22, r25
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a0 ea       	ldi	r26, 0xA0	; 160
    133a:	b0 e4       	ldi	r27, 0x40	; 64
    133c:	8b 87       	std	Y+11, r24	; 0x0b
    133e:	9c 87       	std	Y+12, r25	; 0x0c
    1340:	ad 87       	std	Y+13, r26	; 0x0d
    1342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1344:	6b 85       	ldd	r22, Y+11	; 0x0b
    1346:	7c 85       	ldd	r23, Y+12	; 0x0c
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4a ef       	ldi	r20, 0xFA	; 250
    1352:	54 e4       	ldi	r21, 0x44	; 68
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8f 83       	std	Y+7, r24	; 0x07
    135e:	98 87       	std	Y+8, r25	; 0x08
    1360:	a9 87       	std	Y+9, r26	; 0x09
    1362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1378:	88 23       	and	r24, r24
    137a:	2c f4       	brge	.+10     	; 0x1386 <KEYPAD_getPressedKey+0xea>
		__ticks = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	3f c0       	rjmp	.+126    	; 0x1404 <KEYPAD_getPressedKey+0x168>
	else if (__tmp > 65535)
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	3f ef       	ldi	r19, 0xFF	; 255
    1392:	4f e7       	ldi	r20, 0x7F	; 127
    1394:	57 e4       	ldi	r21, 0x47	; 71
    1396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139a:	18 16       	cp	r1, r24
    139c:	4c f5       	brge	.+82     	; 0x13f0 <KEYPAD_getPressedKey+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139e:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <KEYPAD_getPressedKey+0x14a>
    13c8:	88 ec       	ldi	r24, 0xC8	; 200
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <KEYPAD_getPressedKey+0x138>
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	69 f7       	brne	.-38     	; 0x13c8 <KEYPAD_getPressedKey+0x12c>
    13ee:	14 c0       	rjmp	.+40     	; 0x1418 <KEYPAD_getPressedKey+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <KEYPAD_getPressedKey+0x174>
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01
/* get the keypad button pressed */
uint8 KEYPAD_getPressedKey(void) {
	int row, col;
	KEYPAD_init();
	while (1) {
		for (row = 0; row < KEYPAD_ROW_NUMBER; row++) {
    1418:	89 89       	ldd	r24, Y+17	; 0x11
    141a:	9a 89       	ldd	r25, Y+18	; 0x12
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	9a 8b       	std	Y+18, r25	; 0x12
    1420:	89 8b       	std	Y+17, r24	; 0x11
    1422:	89 89       	ldd	r24, Y+17	; 0x11
    1424:	9a 89       	ldd	r25, Y+18	; 0x12
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	91 05       	cpc	r25, r1
    142a:	0c f4       	brge	.+2      	; 0x142e <KEYPAD_getPressedKey+0x192>
    142c:	46 cf       	rjmp	.-372    	; 0x12ba <KEYPAD_getPressedKey+0x1e>
    142e:	42 cf       	rjmp	.-380    	; 0x12b4 <KEYPAD_getPressedKey+0x18>

00001430 <LCD_init>:
#include"common_macros.h"
#include<util/delay.h>
#include<stdlib.h>

/* send data to lcd */
void LCD_init(void){
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	2e 97       	sbiw	r28, 0x0e	; 14
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);	/* configure Rs as output pin */
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	62 e0       	ldi	r22, 0x02	; 2
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);	/* configure E as output pin */
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	63 e0       	ldi	r22, 0x03	; 3
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* INIT the mode of LCD & configure the output pins */
#if LCD_MODE==LCD_TWO_LINES_EIGHT_BITS_MODE
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PIN_OUTPUT);
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	0e 94 fc 07 	call	0xff8	; 0xff8 <GPIO_setupPortDirection>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 ea       	ldi	r26, 0xA0	; 160
    1466:	b1 e4       	ldi	r27, 0x41	; 65
    1468:	8b 87       	std	Y+11, r24	; 0x0b
    146a:	9c 87       	std	Y+12, r25	; 0x0c
    146c:	ad 87       	std	Y+13, r26	; 0x0d
    146e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6b 85       	ldd	r22, Y+11	; 0x0b
    1472:	7c 85       	ldd	r23, Y+12	; 0x0c
    1474:	8d 85       	ldd	r24, Y+13	; 0x0d
    1476:	9e 85       	ldd	r25, Y+14	; 0x0e
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8f 83       	std	Y+7, r24	; 0x07
    148a:	98 87       	std	Y+8, r25	; 0x08
    148c:	a9 87       	std	Y+9, r26	; 0x09
    148e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1490:	6f 81       	ldd	r22, Y+7	; 0x07
    1492:	78 85       	ldd	r23, Y+8	; 0x08
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <LCD_init+0x82>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	8d 83       	std	Y+5, r24	; 0x05
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <LCD_init+0x100>
	else if (__tmp > 65535)
    14b2:	6f 81       	ldd	r22, Y+7	; 0x07
    14b4:	78 85       	ldd	r23, Y+8	; 0x08
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <LCD_init+0xe2>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c 83       	std	Y+4, r25	; 0x04
    14fa:	8b 83       	std	Y+3, r24	; 0x03
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_init+0xd0>
    1504:	9c 83       	std	Y+4, r25	; 0x04
    1506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <LCD_init+0xc4>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6f 81       	ldd	r22, Y+7	; 0x07
    151e:	78 85       	ldd	r23, Y+8	; 0x08
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9e 83       	std	Y+6, r25	; 0x06
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_init+0x10c>
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
#endif
	_delay_ms(20); 		  										/* LCD Power ON delay always > 15ms */
	LCD_sendCommand(LCD_MODE);									/* 2-lines + 8bit mode OR 2-lines +4bit mode */
    1544:	88 e3       	ldi	r24, 0x38	; 56
    1546:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);							/* clear screen */
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);							/* cursor off */
    1550:	8c e0       	ldi	r24, 0x0C	; 12
    1552:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_sendCommand>
}
    1556:	2e 96       	adiw	r28, 0x0e	; 14
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <LCD_sendCommand>:

/* send commands to lcd */
void LCD_sendCommand(uint8 command){
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	e9 97       	sbiw	r28, 0x39	; 57
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* RS=0 send command mode */
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 e8       	ldi	r26, 0x80	; 128
    158e:	bf e3       	ldi	r27, 0x3F	; 63
    1590:	8d ab       	std	Y+53, r24	; 0x35
    1592:	9e ab       	std	Y+54, r25	; 0x36
    1594:	af ab       	std	Y+55, r26	; 0x37
    1596:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1598:	6d a9       	ldd	r22, Y+53	; 0x35
    159a:	7e a9       	ldd	r23, Y+54	; 0x36
    159c:	8f a9       	ldd	r24, Y+55	; 0x37
    159e:	98 ad       	ldd	r25, Y+56	; 0x38
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a ef       	ldi	r20, 0xFA	; 250
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	89 ab       	std	Y+49, r24	; 0x31
    15b2:	9a ab       	std	Y+50, r25	; 0x32
    15b4:	ab ab       	std	Y+51, r26	; 0x33
    15b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15b8:	69 a9       	ldd	r22, Y+49	; 0x31
    15ba:	7a a9       	ldd	r23, Y+50	; 0x32
    15bc:	8b a9       	ldd	r24, Y+51	; 0x33
    15be:	9c a9       	ldd	r25, Y+52	; 0x34
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	2c f4       	brge	.+10     	; 0x15da <LCD_sendCommand+0x72>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	98 ab       	std	Y+48, r25	; 0x30
    15d6:	8f a7       	std	Y+47, r24	; 0x2f
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    15da:	69 a9       	ldd	r22, Y+49	; 0x31
    15dc:	7a a9       	ldd	r23, Y+50	; 0x32
    15de:	8b a9       	ldd	r24, Y+51	; 0x33
    15e0:	9c a9       	ldd	r25, Y+52	; 0x34
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	4c f5       	brge	.+82     	; 0x1644 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f2:	6d a9       	ldd	r22, Y+53	; 0x35
    15f4:	7e a9       	ldd	r23, Y+54	; 0x36
    15f6:	8f a9       	ldd	r24, Y+55	; 0x37
    15f8:	98 ad       	ldd	r25, Y+56	; 0x38
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e2       	ldi	r20, 0x20	; 32
    1600:	51 e4       	ldi	r21, 0x41	; 65
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	98 ab       	std	Y+48, r25	; 0x30
    1618:	8f a7       	std	Y+47, r24	; 0x2f
    161a:	0f c0       	rjmp	.+30     	; 0x163a <LCD_sendCommand+0xd2>
    161c:	88 ec       	ldi	r24, 0xC8	; 200
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9e a7       	std	Y+46, r25	; 0x2e
    1622:	8d a7       	std	Y+45, r24	; 0x2d
    1624:	8d a5       	ldd	r24, Y+45	; 0x2d
    1626:	9e a5       	ldd	r25, Y+46	; 0x2e
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_sendCommand+0xc0>
    162c:	9e a7       	std	Y+46, r25	; 0x2e
    162e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1630:	8f a5       	ldd	r24, Y+47	; 0x2f
    1632:	98 a9       	ldd	r25, Y+48	; 0x30
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	98 ab       	std	Y+48, r25	; 0x30
    1638:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163a:	8f a5       	ldd	r24, Y+47	; 0x2f
    163c:	98 a9       	ldd	r25, Y+48	; 0x30
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	69 f7       	brne	.-38     	; 0x161c <LCD_sendCommand+0xb4>
    1642:	14 c0       	rjmp	.+40     	; 0x166c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1644:	69 a9       	ldd	r22, Y+49	; 0x31
    1646:	7a a9       	ldd	r23, Y+50	; 0x32
    1648:	8b a9       	ldd	r24, Y+51	; 0x33
    164a:	9c a9       	ldd	r25, Y+52	; 0x34
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	98 ab       	std	Y+48, r25	; 0x30
    1656:	8f a7       	std	Y+47, r24	; 0x2f
    1658:	8f a5       	ldd	r24, Y+47	; 0x2f
    165a:	98 a9       	ldd	r25, Y+48	; 0x30
    165c:	9c a7       	std	Y+44, r25	; 0x2c
    165e:	8b a7       	std	Y+43, r24	; 0x2b
    1660:	8b a5       	ldd	r24, Y+43	; 0x2b
    1662:	9c a5       	ldd	r25, Y+44	; 0x2c
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <LCD_sendCommand+0xfc>
    1668:	9c a7       	std	Y+44, r25	; 0x2c
    166a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); 												/* Tas delay */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* E=1 from datasheet */
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	63 e0       	ldi	r22, 0x03	; 3
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e8       	ldi	r26, 0x80	; 128
    167c:	bf e3       	ldi	r27, 0x3F	; 63
    167e:	8f a3       	std	Y+39, r24	; 0x27
    1680:	98 a7       	std	Y+40, r25	; 0x28
    1682:	a9 a7       	std	Y+41, r26	; 0x29
    1684:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6f a1       	ldd	r22, Y+39	; 0x27
    1688:	78 a5       	ldd	r23, Y+40	; 0x28
    168a:	89 a5       	ldd	r24, Y+41	; 0x29
    168c:	9a a5       	ldd	r25, Y+42	; 0x2a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a ef       	ldi	r20, 0xFA	; 250
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8b a3       	std	Y+35, r24	; 0x23
    16a0:	9c a3       	std	Y+36, r25	; 0x24
    16a2:	ad a3       	std	Y+37, r26	; 0x25
    16a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16a6:	6b a1       	ldd	r22, Y+35	; 0x23
    16a8:	7c a1       	ldd	r23, Y+36	; 0x24
    16aa:	8d a1       	ldd	r24, Y+37	; 0x25
    16ac:	9e a1       	ldd	r25, Y+38	; 0x26
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <LCD_sendCommand+0x160>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9a a3       	std	Y+34, r25	; 0x22
    16c4:	89 a3       	std	Y+33, r24	; 0x21
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    16c8:	6b a1       	ldd	r22, Y+35	; 0x23
    16ca:	7c a1       	ldd	r23, Y+36	; 0x24
    16cc:	8d a1       	ldd	r24, Y+37	; 0x25
    16ce:	9e a1       	ldd	r25, Y+38	; 0x26
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6f a1       	ldd	r22, Y+39	; 0x27
    16e2:	78 a5       	ldd	r23, Y+40	; 0x28
    16e4:	89 a5       	ldd	r24, Y+41	; 0x29
    16e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9a a3       	std	Y+34, r25	; 0x22
    1706:	89 a3       	std	Y+33, r24	; 0x21
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <LCD_sendCommand+0x1c0>
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	98 a3       	std	Y+32, r25	; 0x20
    1710:	8f 8f       	std	Y+31, r24	; 0x1f
    1712:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1714:	98 a1       	ldd	r25, Y+32	; 0x20
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_sendCommand+0x1ae>
    171a:	98 a3       	std	Y+32, r25	; 0x20
    171c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	89 a1       	ldd	r24, Y+33	; 0x21
    1720:	9a a1       	ldd	r25, Y+34	; 0x22
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9a a3       	std	Y+34, r25	; 0x22
    1726:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	89 a1       	ldd	r24, Y+33	; 0x21
    172a:	9a a1       	ldd	r25, Y+34	; 0x22
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <LCD_sendCommand+0x1a2>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6b a1       	ldd	r22, Y+35	; 0x23
    1734:	7c a1       	ldd	r23, Y+36	; 0x24
    1736:	8d a1       	ldd	r24, Y+37	; 0x25
    1738:	9e a1       	ldd	r25, Y+38	; 0x26
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9a a3       	std	Y+34, r25	; 0x22
    1744:	89 a3       	std	Y+33, r24	; 0x21
    1746:	89 a1       	ldd	r24, Y+33	; 0x21
    1748:	9a a1       	ldd	r25, Y+34	; 0x22
    174a:	9e 8f       	std	Y+30, r25	; 0x1e
    174c:	8d 8f       	std	Y+29, r24	; 0x1d
    174e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1750:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <LCD_sendCommand+0x1ea>
    1756:	9e 8f       	std	Y+30, r25	; 0x1e
    1758:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); 												/* Tpw-Tdsw delay */

	/* send command using two modes */
#if LCD_MODE==LCD_TWO_LINES_EIGHT_BITS_MODE
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	69 ad       	ldd	r22, Y+57	; 0x39
    175e:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePort>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e8       	ldi	r26, 0x80	; 128
    1768:	bf e3       	ldi	r27, 0x3F	; 63
    176a:	89 8f       	std	Y+25, r24	; 0x19
    176c:	9a 8f       	std	Y+26, r25	; 0x1a
    176e:	ab 8f       	std	Y+27, r26	; 0x1b
    1770:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	69 8d       	ldd	r22, Y+25	; 0x19
    1774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a ef       	ldi	r20, 0xFA	; 250
    1780:	54 e4       	ldi	r21, 0x44	; 68
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8d 8b       	std	Y+21, r24	; 0x15
    178c:	9e 8b       	std	Y+22, r25	; 0x16
    178e:	af 8b       	std	Y+23, r26	; 0x17
    1790:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 8b       	std	Y+20, r25	; 0x14
    17b0:	8b 8b       	std	Y+19, r24	; 0x13
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    17b4:	6d 89       	ldd	r22, Y+21	; 0x15
    17b6:	7e 89       	ldd	r23, Y+22	; 0x16
    17b8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ba:	98 8d       	ldd	r25, Y+24	; 0x18
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	69 8d       	ldd	r22, Y+25	; 0x19
    17ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9c 8b       	std	Y+20, r25	; 0x14
    17f2:	8b 8b       	std	Y+19, r24	; 0x13
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <LCD_sendCommand+0x2ac>
    17f6:	88 ec       	ldi	r24, 0xC8	; 200
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9a 8b       	std	Y+18, r25	; 0x12
    17fc:	89 8b       	std	Y+17, r24	; 0x11
    17fe:	89 89       	ldd	r24, Y+17	; 0x11
    1800:	9a 89       	ldd	r25, Y+18	; 0x12
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_sendCommand+0x29a>
    1806:	9a 8b       	std	Y+18, r25	; 0x12
    1808:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8b 89       	ldd	r24, Y+19	; 0x13
    180c:	9c 89       	ldd	r25, Y+20	; 0x14
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8b 89       	ldd	r24, Y+19	; 0x13
    1816:	9c 89       	ldd	r25, Y+20	; 0x14
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <LCD_sendCommand+0x28e>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6d 89       	ldd	r22, Y+21	; 0x15
    1820:	7e 89       	ldd	r23, Y+22	; 0x16
    1822:	8f 89       	ldd	r24, Y+23	; 0x17
    1824:	98 8d       	ldd	r25, Y+24	; 0x18
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9c 8b       	std	Y+20, r25	; 0x14
    1830:	8b 8b       	std	Y+19, r24	; 0x13
    1832:	8b 89       	ldd	r24, Y+19	; 0x13
    1834:	9c 89       	ldd	r25, Y+20	; 0x14
    1836:	98 8b       	std	Y+16, r25	; 0x10
    1838:	8f 87       	std	Y+15, r24	; 0x0f
    183a:	8f 85       	ldd	r24, Y+15	; 0x0f
    183c:	98 89       	ldd	r25, Y+16	; 0x10
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_sendCommand+0x2d6>
    1842:	98 8b       	std	Y+16, r25	; 0x10
    1844:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+5, GET_BIT(command, 1));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+6, GET_BIT(command, 2));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+7, GET_BIT(command, 3));
#endif
	_delay_ms(1); 												/* Tdsw */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* E=0 from datasheet */
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	63 e0       	ldi	r22, 0x03	; 3
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	a0 e8       	ldi	r26, 0x80	; 128
    1856:	bf e3       	ldi	r27, 0x3F	; 63
    1858:	8b 87       	std	Y+11, r24	; 0x0b
    185a:	9c 87       	std	Y+12, r25	; 0x0c
    185c:	ad 87       	std	Y+13, r26	; 0x0d
    185e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6b 85       	ldd	r22, Y+11	; 0x0b
    1862:	7c 85       	ldd	r23, Y+12	; 0x0c
    1864:	8d 85       	ldd	r24, Y+13	; 0x0d
    1866:	9e 85       	ldd	r25, Y+14	; 0x0e
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8f 83       	std	Y+7, r24	; 0x07
    187a:	98 87       	std	Y+8, r25	; 0x08
    187c:	a9 87       	std	Y+9, r26	; 0x09
    187e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    18a2:	6f 81       	ldd	r22, Y+7	; 0x07
    18a4:	78 85       	ldd	r23, Y+8	; 0x08
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    18bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18be:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <LCD_sendCommand+0x39a>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_sendCommand+0x388>
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <LCD_sendCommand+0x37c>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6f 81       	ldd	r22, Y+7	; 0x07
    190e:	78 85       	ldd	r23, Y+8	; 0x08
    1910:	89 85       	ldd	r24, Y+9	; 0x09
    1912:	9a 85       	ldd	r25, Y+10	; 0x0a
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_sendCommand+0x3c4>
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); 												/* Th */
}
    1934:	e9 96       	adiw	r28, 0x39	; 57
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <LCD_displayCharacter>:

/* send data to lcd */
void LCD_displayCharacter(char data){
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	e9 97       	sbiw	r28, 0x39	; 57
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* RS=1 send data mode */
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	62 e0       	ldi	r22, 0x02	; 2
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e8       	ldi	r26, 0x80	; 128
    196c:	bf e3       	ldi	r27, 0x3F	; 63
    196e:	8d ab       	std	Y+53, r24	; 0x35
    1970:	9e ab       	std	Y+54, r25	; 0x36
    1972:	af ab       	std	Y+55, r26	; 0x37
    1974:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	6d a9       	ldd	r22, Y+53	; 0x35
    1978:	7e a9       	ldd	r23, Y+54	; 0x36
    197a:	8f a9       	ldd	r24, Y+55	; 0x37
    197c:	98 ad       	ldd	r25, Y+56	; 0x38
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	89 ab       	std	Y+49, r24	; 0x31
    1990:	9a ab       	std	Y+50, r25	; 0x32
    1992:	ab ab       	std	Y+51, r26	; 0x33
    1994:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1996:	69 a9       	ldd	r22, Y+49	; 0x31
    1998:	7a a9       	ldd	r23, Y+50	; 0x32
    199a:	8b a9       	ldd	r24, Y+51	; 0x33
    199c:	9c a9       	ldd	r25, Y+52	; 0x34
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	98 ab       	std	Y+48, r25	; 0x30
    19b4:	8f a7       	std	Y+47, r24	; 0x2f
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    19b8:	69 a9       	ldd	r22, Y+49	; 0x31
    19ba:	7a a9       	ldd	r23, Y+50	; 0x32
    19bc:	8b a9       	ldd	r24, Y+51	; 0x33
    19be:	9c a9       	ldd	r25, Y+52	; 0x34
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	6d a9       	ldd	r22, Y+53	; 0x35
    19d2:	7e a9       	ldd	r23, Y+54	; 0x36
    19d4:	8f a9       	ldd	r24, Y+55	; 0x37
    19d6:	98 ad       	ldd	r25, Y+56	; 0x38
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	98 ab       	std	Y+48, r25	; 0x30
    19f6:	8f a7       	std	Y+47, r24	; 0x2f
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <LCD_displayCharacter+0xd2>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9e a7       	std	Y+46, r25	; 0x2e
    1a00:	8d a7       	std	Y+45, r24	; 0x2d
    1a02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <LCD_displayCharacter+0xc0>
    1a0a:	9e a7       	std	Y+46, r25	; 0x2e
    1a0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a10:	98 a9       	ldd	r25, Y+48	; 0x30
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	98 ab       	std	Y+48, r25	; 0x30
    1a16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <LCD_displayCharacter+0xb4>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	69 a9       	ldd	r22, Y+49	; 0x31
    1a24:	7a a9       	ldd	r23, Y+50	; 0x32
    1a26:	8b a9       	ldd	r24, Y+51	; 0x33
    1a28:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	98 ab       	std	Y+48, r25	; 0x30
    1a34:	8f a7       	std	Y+47, r24	; 0x2f
    1a36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a38:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3a:	9c a7       	std	Y+44, r25	; 0x2c
    1a3c:	8b a7       	std	Y+43, r24	; 0x2b
    1a3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_displayCharacter+0xfc>
    1a46:	9c a7       	std	Y+44, r25	; 0x2c
    1a48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); 												/* Tas delay */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* E=1 from datasheet */
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	63 e0       	ldi	r22, 0x03	; 3
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a0 e8       	ldi	r26, 0x80	; 128
    1a5a:	bf e3       	ldi	r27, 0x3F	; 63
    1a5c:	8f a3       	std	Y+39, r24	; 0x27
    1a5e:	98 a7       	std	Y+40, r25	; 0x28
    1a60:	a9 a7       	std	Y+41, r26	; 0x29
    1a62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	6f a1       	ldd	r22, Y+39	; 0x27
    1a66:	78 a5       	ldd	r23, Y+40	; 0x28
    1a68:	89 a5       	ldd	r24, Y+41	; 0x29
    1a6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	4a ef       	ldi	r20, 0xFA	; 250
    1a72:	54 e4       	ldi	r21, 0x44	; 68
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8b a3       	std	Y+35, r24	; 0x23
    1a7e:	9c a3       	std	Y+36, r25	; 0x24
    1a80:	ad a3       	std	Y+37, r26	; 0x25
    1a82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a84:	6b a1       	ldd	r22, Y+35	; 0x23
    1a86:	7c a1       	ldd	r23, Y+36	; 0x24
    1a88:	8d a1       	ldd	r24, Y+37	; 0x25
    1a8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5f e3       	ldi	r21, 0x3F	; 63
    1a94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9a a3       	std	Y+34, r25	; 0x22
    1aa2:	89 a3       	std	Y+33, r24	; 0x21
    1aa4:	3f c0       	rjmp	.+126    	; 0x1b24 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1aa6:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aaa:	8d a1       	ldd	r24, Y+37	; 0x25
    1aac:	9e a1       	ldd	r25, Y+38	; 0x26
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	3f ef       	ldi	r19, 0xFF	; 255
    1ab2:	4f e7       	ldi	r20, 0x7F	; 127
    1ab4:	57 e4       	ldi	r21, 0x47	; 71
    1ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aba:	18 16       	cp	r1, r24
    1abc:	4c f5       	brge	.+82     	; 0x1b10 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abe:	6f a1       	ldd	r22, Y+39	; 0x27
    1ac0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ac2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9a a3       	std	Y+34, r25	; 0x22
    1ae4:	89 a3       	std	Y+33, r24	; 0x21
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <LCD_displayCharacter+0x1c0>
    1ae8:	88 ec       	ldi	r24, 0xC8	; 200
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	98 a3       	std	Y+32, r25	; 0x20
    1aee:	8f 8f       	std	Y+31, r24	; 0x1f
    1af0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1af2:	98 a1       	ldd	r25, Y+32	; 0x20
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <LCD_displayCharacter+0x1ae>
    1af8:	98 a3       	std	Y+32, r25	; 0x20
    1afa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	89 a1       	ldd	r24, Y+33	; 0x21
    1afe:	9a a1       	ldd	r25, Y+34	; 0x22
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	9a a3       	std	Y+34, r25	; 0x22
    1b04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	89 a1       	ldd	r24, Y+33	; 0x21
    1b08:	9a a1       	ldd	r25, Y+34	; 0x22
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <LCD_displayCharacter+0x1a2>
    1b0e:	14 c0       	rjmp	.+40     	; 0x1b38 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b10:	6b a1       	ldd	r22, Y+35	; 0x23
    1b12:	7c a1       	ldd	r23, Y+36	; 0x24
    1b14:	8d a1       	ldd	r24, Y+37	; 0x25
    1b16:	9e a1       	ldd	r25, Y+38	; 0x26
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9a a3       	std	Y+34, r25	; 0x22
    1b22:	89 a3       	std	Y+33, r24	; 0x21
    1b24:	89 a1       	ldd	r24, Y+33	; 0x21
    1b26:	9a a1       	ldd	r25, Y+34	; 0x22
    1b28:	9e 8f       	std	Y+30, r25	; 0x1e
    1b2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD_displayCharacter+0x1ea>
    1b34:	9e 8f       	std	Y+30, r25	; 0x1e
    1b36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); 												/* Tpw-Tdsw delay */

	/* send command using two modes */
#if LCD_MODE==LCD_TWO_LINES_EIGHT_BITS_MODE
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	69 ad       	ldd	r22, Y+57	; 0x39
    1b3c:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_writePort>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e8       	ldi	r26, 0x80	; 128
    1b46:	bf e3       	ldi	r27, 0x3F	; 63
    1b48:	89 8f       	std	Y+25, r24	; 0x19
    1b4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b50:	69 8d       	ldd	r22, Y+25	; 0x19
    1b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4a ef       	ldi	r20, 0xFA	; 250
    1b5e:	54 e4       	ldi	r21, 0x44	; 68
    1b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	8d 8b       	std	Y+21, r24	; 0x15
    1b6a:	9e 8b       	std	Y+22, r25	; 0x16
    1b6c:	af 8b       	std	Y+23, r26	; 0x17
    1b6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b70:	6d 89       	ldd	r22, Y+21	; 0x15
    1b72:	7e 89       	ldd	r23, Y+22	; 0x16
    1b74:	8f 89       	ldd	r24, Y+23	; 0x17
    1b76:	98 8d       	ldd	r25, Y+24	; 0x18
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	2c f4       	brge	.+10     	; 0x1b92 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9c 8b       	std	Y+20, r25	; 0x14
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1b92:	6d 89       	ldd	r22, Y+21	; 0x15
    1b94:	7e 89       	ldd	r23, Y+22	; 0x16
    1b96:	8f 89       	ldd	r24, Y+23	; 0x17
    1b98:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ba0:	57 e4       	ldi	r21, 0x47	; 71
    1ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	4c f5       	brge	.+82     	; 0x1bfc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1baa:	69 8d       	ldd	r22, Y+25	; 0x19
    1bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e2       	ldi	r20, 0x20	; 32
    1bb8:	51 e4       	ldi	r21, 0x41	; 65
    1bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9c 8b       	std	Y+20, r25	; 0x14
    1bd0:	8b 8b       	std	Y+19, r24	; 0x13
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <LCD_displayCharacter+0x2ac>
    1bd4:	88 ec       	ldi	r24, 0xC8	; 200
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9a 8b       	std	Y+18, r25	; 0x12
    1bda:	89 8b       	std	Y+17, r24	; 0x11
    1bdc:	89 89       	ldd	r24, Y+17	; 0x11
    1bde:	9a 89       	ldd	r25, Y+18	; 0x12
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_displayCharacter+0x29a>
    1be4:	9a 8b       	std	Y+18, r25	; 0x12
    1be6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bea:	9c 89       	ldd	r25, Y+20	; 0x14
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	69 f7       	brne	.-38     	; 0x1bd4 <LCD_displayCharacter+0x28e>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1c00:	8f 89       	ldd	r24, Y+23	; 0x17
    1c02:	98 8d       	ldd	r25, Y+24	; 0x18
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
    1c10:	8b 89       	ldd	r24, Y+19	; 0x13
    1c12:	9c 89       	ldd	r25, Y+20	; 0x14
    1c14:	98 8b       	std	Y+16, r25	; 0x10
    1c16:	8f 87       	std	Y+15, r24	; 0x0f
    1c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1a:	98 89       	ldd	r25, Y+16	; 0x10
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_displayCharacter+0x2d6>
    1c20:	98 8b       	std	Y+16, r25	; 0x10
    1c22:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+5, GET_BIT(data, 1));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+6, GET_BIT(data, 2));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_FIRST_PIN_ID+7, GET_BIT(data, 3));
#endif
	_delay_ms(1); 												/* Tdsw */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);      /* E=0 from datasheet */
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	63 e0       	ldi	r22, 0x03	; 3
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a0 e8       	ldi	r26, 0x80	; 128
    1c34:	bf e3       	ldi	r27, 0x3F	; 63
    1c36:	8b 87       	std	Y+11, r24	; 0x0b
    1c38:	9c 87       	std	Y+12, r25	; 0x0c
    1c3a:	ad 87       	std	Y+13, r26	; 0x0d
    1c3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a ef       	ldi	r20, 0xFA	; 250
    1c4c:	54 e4       	ldi	r21, 0x44	; 68
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	8f 83       	std	Y+7, r24	; 0x07
    1c58:	98 87       	std	Y+8, r25	; 0x08
    1c5a:	a9 87       	std	Y+9, r26	; 0x09
    1c5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c60:	78 85       	ldd	r23, Y+8	; 0x08
    1c62:	89 85       	ldd	r24, Y+9	; 0x09
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e8       	ldi	r20, 0x80	; 128
    1c6c:	5f e3       	ldi	r21, 0x3F	; 63
    1c6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c72:	88 23       	and	r24, r24
    1c74:	2c f4       	brge	.+10     	; 0x1c80 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	3f c0       	rjmp	.+126    	; 0x1cfe <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1c80:	6f 81       	ldd	r22, Y+7	; 0x07
    1c82:	78 85       	ldd	r23, Y+8	; 0x08
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	3f ef       	ldi	r19, 0xFF	; 255
    1c8c:	4f e7       	ldi	r20, 0x7F	; 127
    1c8e:	57 e4       	ldi	r21, 0x47	; 71
    1c90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c94:	18 16       	cp	r1, r24
    1c96:	4c f5       	brge	.+82     	; 0x1cea <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e2       	ldi	r20, 0x20	; 32
    1ca6:	51 e4       	ldi	r21, 0x41	; 65
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	cd 01       	movw	r24, r26
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <LCD_displayCharacter+0x39a>
    1cc2:	88 ec       	ldi	r24, 0xC8	; 200
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9c 83       	std	Y+4, r25	; 0x04
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <LCD_displayCharacter+0x388>
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	69 f7       	brne	.-38     	; 0x1cc2 <LCD_displayCharacter+0x37c>
    1ce8:	14 c0       	rjmp	.+40     	; 0x1d12 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cea:	6f 81       	ldd	r22, Y+7	; 0x07
    1cec:	78 85       	ldd	r23, Y+8	; 0x08
    1cee:	89 85       	ldd	r24, Y+9	; 0x09
    1cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_displayCharacter+0x3c4>
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); 												/* Th */
}
    1d12:	e9 96       	adiw	r28, 0x39	; 57
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <LCD_displayString>:



/* write string */
void LCD_displayString(const char *str_ptr){
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <LCD_displayString+0x6>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	0a c0       	rjmp	.+20     	; 0x1d48 <LCD_displayString+0x24>
	while(*str_ptr != '\0'){
		LCD_displayCharacter(*str_ptr);
    1d34:	e9 81       	ldd	r30, Y+1	; 0x01
    1d36:	fa 81       	ldd	r31, Y+2	; 0x02
    1d38:	80 81       	ld	r24, Z
    1d3a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_displayCharacter>
		str_ptr++;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01



/* write string */
void LCD_displayString(const char *str_ptr){
	while(*str_ptr != '\0'){
    1d48:	e9 81       	ldd	r30, Y+1	; 0x01
    1d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 23       	and	r24, r24
    1d50:	89 f7       	brne	.-30     	; 0x1d34 <LCD_displayString+0x10>
		LCD_displayCharacter(*str_ptr);
		str_ptr++;
	}
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <LCD_moveCursor>:

/* move cursor base 0 */
void LCD_moveCursor(uint8 row, uint8 col){
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <LCD_moveCursor+0x6>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <LCD_moveCursor+0x8>
    1d64:	0f 92       	push	r0
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    1d6c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 location;
	switch(row){
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3d 83       	std	Y+5, r19	; 0x05
    1d76:	2c 83       	std	Y+4, r18	; 0x04
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	c1 f0       	breq	.+48     	; 0x1db2 <LCD_moveCursor+0x56>
    1d82:	2c 81       	ldd	r18, Y+4	; 0x04
    1d84:	3d 81       	ldd	r19, Y+5	; 0x05
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <LCD_moveCursor+0x3a>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	61 f0       	breq	.+24     	; 0x1dac <LCD_moveCursor+0x50>
    1d94:	19 c0       	rjmp	.+50     	; 0x1dc8 <LCD_moveCursor+0x6c>
    1d96:	2c 81       	ldd	r18, Y+4	; 0x04
    1d98:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	69 f0       	breq	.+26     	; 0x1dba <LCD_moveCursor+0x5e>
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <LCD_moveCursor+0x66>
    1daa:	0e c0       	rjmp	.+28     	; 0x1dc8 <LCD_moveCursor+0x6c>
	case 0:
		location=0x00+col;
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	0b c0       	rjmp	.+22     	; 0x1dc8 <LCD_moveCursor+0x6c>
		break;
	case 1:
		location=0x40+col;
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	80 5c       	subi	r24, 0xC0	; 192
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	07 c0       	rjmp	.+14     	; 0x1dc8 <LCD_moveCursor+0x6c>
		break;
	case 2:
		location=0x10+col;
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	80 5f       	subi	r24, 0xF0	; 240
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <LCD_moveCursor+0x6c>
		break;
	case 3:
		location=0x50+col;
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	80 5b       	subi	r24, 0xB0	; 176
    1dc6:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	LCD_sendCommand(location|LCD_FORCE_CURSOR);
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	80 68       	ori	r24, 0x80	; 128
    1dcc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_sendCommand>
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <LCD_displayStringRowColumn>:

/* print string in specific location */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char* str_ptr){
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <LCD_displayStringRowColumn+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <LCD_displayStringRowColumn+0x8>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	6a 83       	std	Y+2, r22	; 0x02
    1df0:	5c 83       	std	Y+4, r21	; 0x04
    1df2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	6a 81       	ldd	r22, Y+2	; 0x02
    1df8:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
	LCD_displayString(str_ptr);
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>
}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <LCD_clearScreen>:

/* clear lcd screen */
void LCD_clearScreen(void){
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_sendCommand>
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LCD_intgerToString>:

/* display integer number on lcd */
void LCD_intgerToString(uint16 number){
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	64 97       	sbiw	r28, 0x14	; 20
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	9c 8b       	std	Y+20, r25	; 0x14
    1e3c:	8b 8b       	std	Y+19, r24	; 0x13
	char buff[18];
	itoa(number, buff, 10);
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	9e 01       	movw	r18, r28
    1e44:	2f 5f       	subi	r18, 0xFF	; 255
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	b9 01       	movw	r22, r18
    1e4a:	4a e0       	ldi	r20, 0x0A	; 10
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	0e 94 83 14 	call	0x2906	; 0x2906 <itoa>
	LCD_displayString(buff);
    1e52:	ce 01       	movw	r24, r28
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>
}
    1e5a:	64 96       	adiw	r28, 0x14	; 20
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <main>:
void error(void);
void takePassword(uint8 *str);

uint16 seconds;

int main(){
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	a6 97       	sbiw	r28, 0x26	; 38
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
	uint8 unMatchCounter,pressedButton;

	Timer1_ConfigType timer1={0,31250,TIMER1_FRQ256, TIMER1_CTC};
    1e80:	ce 01       	movw	r24, r28
    1e82:	41 96       	adiw	r24, 0x11	; 17
    1e84:	9e 8f       	std	Y+30, r25	; 0x1e
    1e86:	8d 8f       	std	Y+29, r24	; 0x1d
    1e88:	ef ee       	ldi	r30, 0xEF	; 239
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	f8 a3       	std	Y+32, r31	; 0x20
    1e8e:	ef 8f       	std	Y+31, r30	; 0x1f
    1e90:	f6 e0       	ldi	r31, 0x06	; 6
    1e92:	f9 a3       	std	Y+33, r31	; 0x21
    1e94:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1e96:	f8 a1       	ldd	r31, Y+32	; 0x20
    1e98:	00 80       	ld	r0, Z
    1e9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	98 a3       	std	Y+32, r25	; 0x20
    1ea2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ea4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1ea6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1ea8:	00 82       	st	Z, r0
    1eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1eb4:	99 a1       	ldd	r25, Y+33	; 0x21
    1eb6:	91 50       	subi	r25, 0x01	; 1
    1eb8:	99 a3       	std	Y+33, r25	; 0x21
    1eba:	e9 a1       	ldd	r30, Y+33	; 0x21
    1ebc:	ee 23       	and	r30, r30
    1ebe:	51 f7       	brne	.-44     	; 0x1e94 <main+0x28>
	 UART_ConfigType uart = { INTERRUPT_DISABLE, EVEN_PARITY, ONE_BIT,
				EIGHT_BIT, BAUD_RATE_9600 };
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	47 96       	adiw	r24, 0x17	; 23
    1ec4:	9b a3       	std	Y+35, r25	; 0x23
    1ec6:	8a a3       	std	Y+34, r24	; 0x22
    1ec8:	e9 ee       	ldi	r30, 0xE9	; 233
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	fd a3       	std	Y+37, r31	; 0x25
    1ece:	ec a3       	std	Y+36, r30	; 0x24
    1ed0:	f6 e0       	ldi	r31, 0x06	; 6
    1ed2:	fe a3       	std	Y+38, r31	; 0x26
    1ed4:	ec a1       	ldd	r30, Y+36	; 0x24
    1ed6:	fd a1       	ldd	r31, Y+37	; 0x25
    1ed8:	00 80       	ld	r0, Z
    1eda:	8c a1       	ldd	r24, Y+36	; 0x24
    1edc:	9d a1       	ldd	r25, Y+37	; 0x25
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	9d a3       	std	Y+37, r25	; 0x25
    1ee2:	8c a3       	std	Y+36, r24	; 0x24
    1ee4:	ea a1       	ldd	r30, Y+34	; 0x22
    1ee6:	fb a1       	ldd	r31, Y+35	; 0x23
    1ee8:	00 82       	st	Z, r0
    1eea:	8a a1       	ldd	r24, Y+34	; 0x22
    1eec:	9b a1       	ldd	r25, Y+35	; 0x23
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	9b a3       	std	Y+35, r25	; 0x23
    1ef2:	8a a3       	std	Y+34, r24	; 0x22
    1ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef6:	91 50       	subi	r25, 0x01	; 1
    1ef8:	9e a3       	std	Y+38, r25	; 0x26
    1efa:	ee a1       	ldd	r30, Y+38	; 0x26
    1efc:	ee 23       	and	r30, r30
    1efe:	51 f7       	brne	.-44     	; 0x1ed4 <main+0x68>

	sei();
    1f00:	78 94       	sei

	Timer1_init(&timer1);
    1f02:	ce 01       	movw	r24, r28
    1f04:	41 96       	adiw	r24, 0x11	; 17
    1f06:	0e 94 51 12 	call	0x24a2	; 0x24a2 <Timer1_init>
	Timer1_setCallBack(secondsCounter);
    1f0a:	84 e7       	ldi	r24, 0x74	; 116
    1f0c:	90 e1       	ldi	r25, 0x10	; 16
    1f0e:	0e 94 b1 12 	call	0x2562	; 0x2562 <Timer1_setCallBack>
	UART_init(&uart);
    1f12:	ce 01       	movw	r24, r28
    1f14:	47 96       	adiw	r24, 0x17	; 23
    1f16:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <UART_init>
	LCD_init();
    1f1a:	0e 94 18 0a 	call	0x1430	; 0x1430 <LCD_init>

	/* create new password to the system */
	while(createPassword()==FAILURE);
    1f1e:	0e 94 24 11 	call	0x2248	; 0x2248 <createPassword>
    1f22:	88 23       	and	r24, r24
    1f24:	e1 f3       	breq	.-8      	; 0x1f1e <main+0xb2>

	while(1){
		LCD_clearScreen();
    1f26:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
		LCD_displayString("+ : Open Door");
    1f32:	80 e6       	ldi	r24, 0x60	; 96
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>
		LCD_moveCursor(1,0);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
		LCD_displayString("- : Change pass");
    1f42:	8e e6       	ldi	r24, 0x6E	; 110
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>

		/* get options */
		pressedButton=KEYPAD_getPressedKey();
    1f4a:	0e 94 4e 09 	call	0x129c	; 0x129c <KEYPAD_getPressedKey>
    1f4e:	8f 87       	std	Y+15, r24	; 0x0f
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a8 ec       	ldi	r26, 0xC8	; 200
    1f56:	b3 e4       	ldi	r27, 0x43	; 67
    1f58:	8b 87       	std	Y+11, r24	; 0x0b
    1f5a:	9c 87       	std	Y+12, r25	; 0x0c
    1f5c:	ad 87       	std	Y+13, r26	; 0x0d
    1f5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a ef       	ldi	r20, 0xFA	; 250
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8f 83       	std	Y+7, r24	; 0x07
    1f7a:	98 87       	std	Y+8, r25	; 0x08
    1f7c:	a9 87       	std	Y+9, r26	; 0x09
    1f7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f80:	6f 81       	ldd	r22, Y+7	; 0x07
    1f82:	78 85       	ldd	r23, Y+8	; 0x08
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e8       	ldi	r20, 0x80	; 128
    1f8e:	5f e3       	ldi	r21, 0x3F	; 63
    1f90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f94:	88 23       	and	r24, r24
    1f96:	2c f4       	brge	.+10     	; 0x1fa2 <main+0x136>
		__ticks = 1;
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	3f c0       	rjmp	.+126    	; 0x2020 <main+0x1b4>
	else if (__tmp > 65535)
    1fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa4:	78 85       	ldd	r23, Y+8	; 0x08
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	4c f5       	brge	.+82     	; 0x200c <main+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e2       	ldi	r20, 0x20	; 32
    1fc8:	51 e4       	ldi	r21, 0x41	; 65
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <main+0x196>
    1fe4:	88 ec       	ldi	r24, 0xC8	; 200
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 83       	std	Y+4, r25	; 0x04
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <main+0x184>
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	69 f7       	brne	.-38     	; 0x1fe4 <main+0x178>
    200a:	14 c0       	rjmp	.+40     	; 0x2034 <main+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9e 83       	std	Y+6, r25	; 0x06
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <main+0x1c0>
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
		/* for solving overlapping */
		_delay_ms(400);

		/* check the pressed button */
		if(pressedButton!='-'&&pressedButton!='+')
    2034:	8f 85       	ldd	r24, Y+15	; 0x0f
    2036:	8d 32       	cpi	r24, 0x2D	; 45
    2038:	21 f0       	breq	.+8      	; 0x2042 <main+0x1d6>
    203a:	8f 85       	ldd	r24, Y+15	; 0x0f
    203c:	8b 32       	cpi	r24, 0x2B	; 43
    203e:	09 f0       	breq	.+2      	; 0x2042 <main+0x1d6>
    2040:	72 cf       	rjmp	.-284    	; 0x1f26 <main+0xba>
			continue;

		/* check the Password */
		unMatchCounter=0;
    2042:	18 8a       	std	Y+16, r1	; 0x10
    2044:	03 c0       	rjmp	.+6      	; 0x204c <main+0x1e0>
		while (unMatchCounter < 3 && checkPassword() == FAILURE) {
			unMatchCounter++;
    2046:	88 89       	ldd	r24, Y+16	; 0x10
    2048:	8f 5f       	subi	r24, 0xFF	; 255
    204a:	88 8b       	std	Y+16, r24	; 0x10
		if(pressedButton!='-'&&pressedButton!='+')
			continue;

		/* check the Password */
		unMatchCounter=0;
		while (unMatchCounter < 3 && checkPassword() == FAILURE) {
    204c:	88 89       	ldd	r24, Y+16	; 0x10
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	20 f4       	brcc	.+8      	; 0x205a <main+0x1ee>
    2052:	0e 94 8d 11 	call	0x231a	; 0x231a <checkPassword>
    2056:	88 23       	and	r24, r24
    2058:	b1 f3       	breq	.-20     	; 0x2046 <main+0x1da>
			unMatchCounter++;
		}

		if (unMatchCounter == 3) {
    205a:	88 89       	ldd	r24, Y+16	; 0x10
    205c:	83 30       	cpi	r24, 0x03	; 3
    205e:	19 f4       	brne	.+6      	; 0x2066 <main+0x1fa>
			error();
    2060:	0e 94 cc 11 	call	0x2398	; 0x2398 <error>
    2064:	60 cf       	rjmp	.-320    	; 0x1f26 <main+0xba>
			continue;
		}

		if(pressedButton=='-'){
    2066:	8f 85       	ldd	r24, Y+15	; 0x0f
    2068:	8d 32       	cpi	r24, 0x2D	; 45
    206a:	29 f4       	brne	.+10     	; 0x2076 <main+0x20a>
			/* create new password */
			while(createPassword()==FAILURE);
    206c:	0e 94 24 11 	call	0x2248	; 0x2248 <createPassword>
    2070:	88 23       	and	r24, r24
    2072:	e1 f3       	breq	.-8      	; 0x206c <main+0x200>
    2074:	58 cf       	rjmp	.-336    	; 0x1f26 <main+0xba>

		}else if(pressedButton=='+'){
    2076:	8f 85       	ldd	r24, Y+15	; 0x0f
    2078:	8b 32       	cpi	r24, 0x2B	; 43
    207a:	09 f0       	breq	.+2      	; 0x207e <main+0x212>
    207c:	54 cf       	rjmp	.-344    	; 0x1f26 <main+0xba>
			/* opening door lock routine */

			UART_sendByte(UART_OPEN_DOOR_FLAG);
    207e:	86 e0       	ldi	r24, 0x06	; 6
    2080:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>

			LCD_clearScreen();
    2084:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
			LCD_displayString("Door is Unlocking");
    2090:	8e e7       	ldi	r24, 0x7E	; 126
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>

			seconds=0;
    2098:	10 92 fb 00 	sts	0x00FB, r1
    209c:	10 92 fa 00 	sts	0x00FA, r1
			while(seconds<15);
    20a0:	80 91 fa 00 	lds	r24, 0x00FA
    20a4:	90 91 fb 00 	lds	r25, 0x00FB
    20a8:	8f 30       	cpi	r24, 0x0F	; 15
    20aa:	91 05       	cpc	r25, r1
    20ac:	c8 f3       	brcs	.-14     	; 0x20a0 <main+0x234>

			LCD_clearScreen();
    20ae:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_clearScreen>
			LCD_displayString("Unlocked");
    20b2:	80 e9       	ldi	r24, 0x90	; 144
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>

			while(seconds<18);
    20ba:	80 91 fa 00 	lds	r24, 0x00FA
    20be:	90 91 fb 00 	lds	r25, 0x00FB
    20c2:	82 31       	cpi	r24, 0x12	; 18
    20c4:	91 05       	cpc	r25, r1
    20c6:	c8 f3       	brcs	.-14     	; 0x20ba <main+0x24e>

			LCD_moveCursor(0,0);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
			LCD_displayString("Door is Locking");
    20d0:	89 e9       	ldi	r24, 0x99	; 153
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>

			while(seconds<33);
    20d8:	80 91 fa 00 	lds	r24, 0x00FA
    20dc:	90 91 fb 00 	lds	r25, 0x00FB
    20e0:	81 32       	cpi	r24, 0x21	; 33
    20e2:	91 05       	cpc	r25, r1
    20e4:	c8 f3       	brcs	.-14     	; 0x20d8 <main+0x26c>
    20e6:	1f cf       	rjmp	.-450    	; 0x1f26 <main+0xba>

000020e8 <secondsCounter>:
	}


}

void secondsCounter(void){
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    20f0:	80 91 fa 00 	lds	r24, 0x00FA
    20f4:	90 91 fb 00 	lds	r25, 0x00FB
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	90 93 fb 00 	sts	0x00FB, r25
    20fe:	80 93 fa 00 	sts	0x00FA, r24
}
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <takePassword>:

void takePassword(uint8 *str){
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	62 97       	sbiw	r28, 0x12	; 18
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	9a 8b       	std	Y+18, r25	; 0x12
    211e:	89 8b       	std	Y+17, r24	; 0x11
	uint8 idx=0,pressedButton;
    2120:	18 8a       	std	Y+16, r1	; 0x10
	while (1) {
		pressedButton = KEYPAD_getPressedKey();
    2122:	0e 94 4e 09 	call	0x129c	; 0x129c <KEYPAD_getPressedKey>
    2126:	8f 87       	std	Y+15, r24	; 0x0f
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a8 ec       	ldi	r26, 0xC8	; 200
    212e:	b3 e4       	ldi	r27, 0x43	; 67
    2130:	8b 87       	std	Y+11, r24	; 0x0b
    2132:	9c 87       	std	Y+12, r25	; 0x0c
    2134:	ad 87       	std	Y+13, r26	; 0x0d
    2136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6b 85       	ldd	r22, Y+11	; 0x0b
    213a:	7c 85       	ldd	r23, Y+12	; 0x0c
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8f 83       	std	Y+7, r24	; 0x07
    2152:	98 87       	std	Y+8, r25	; 0x08
    2154:	a9 87       	std	Y+9, r26	; 0x09
    2156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <takePassword+0x72>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <takePassword+0xf0>
	else if (__tmp > 65535)
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <takePassword+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6b 85       	ldd	r22, Y+11	; 0x0b
    2194:	7c 85       	ldd	r23, Y+12	; 0x0c
    2196:	8d 85       	ldd	r24, Y+13	; 0x0d
    2198:	9e 85       	ldd	r25, Y+14	; 0x0e
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <takePassword+0xd2>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c 83       	std	Y+4, r25	; 0x04
    21c2:	8b 83       	std	Y+3, r24	; 0x03
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <takePassword+0xc0>
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	9e 81       	ldd	r25, Y+6	; 0x06
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <takePassword+0xb4>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <takePassword+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <takePassword+0xfc>
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01

		/* for solving overlapping */
		_delay_ms(400);

		if (pressedButton == ENTER_BUTTON) {
    220c:	8f 85       	ldd	r24, Y+15	; 0x0f
    220e:	8d 33       	cpi	r24, 0x3D	; 61
    2210:	91 f0       	breq	.+36     	; 0x2236 <takePassword+0x12e>
			break;
		}
		str[idx++] = pressedButton + '0';
    2212:	88 89       	ldd	r24, Y+16	; 0x10
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	89 89       	ldd	r24, Y+17	; 0x11
    221a:	9a 89       	ldd	r25, Y+18	; 0x12
    221c:	fc 01       	movw	r30, r24
    221e:	e2 0f       	add	r30, r18
    2220:	f3 1f       	adc	r31, r19
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	80 5d       	subi	r24, 0xD0	; 208
    2226:	80 83       	st	Z, r24
    2228:	88 89       	ldd	r24, Y+16	; 0x10
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	88 8b       	std	Y+16, r24	; 0x10
		LCD_displayCharacter('*');
    222e:	8a e2       	ldi	r24, 0x2A	; 42
    2230:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_displayCharacter>
    2234:	76 cf       	rjmp	.-276    	; 0x2122 <takePassword+0x1a>
	}
}
    2236:	62 96       	adiw	r28, 0x12	; 18
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <createPassword>:

uint8 createPassword(){
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	2b 97       	sbiw	r28, 0x0b	; 11
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5], password_confirmation[5], idx = 0;
    225c:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    225e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    226a:	89 ea       	ldi	r24, 0xA9	; 169
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>

	/* take the pass from the user */
	takePassword(password);
    227a:	ce 01       	movw	r24, r28
    227c:	02 96       	adiw	r24, 0x02	; 2
    227e:	0e 94 84 10 	call	0x2108	; 0x2108 <takePassword>

	LCD_moveCursor(0, 0);
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
	LCD_displayString("plz re_enter the");
    228a:	8a eb       	ldi	r24, 0xBA	; 186
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
	LCD_displayString("same pass: ");
    229a:	8b ec       	ldi	r24, 0xCB	; 203
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>


	/* re-take the pass from the user */
	takePassword(password_confirmation);
    22a2:	ce 01       	movw	r24, r28
    22a4:	07 96       	adiw	r24, 0x07	; 7
    22a6:	0e 94 84 10 	call	0x2108	; 0x2108 <takePassword>

	/* send two passwords to controller */
	UART_sendByte(UART_SEND_PASS_FLAG);
    22aa:	84 e0       	ldi	r24, 0x04	; 4
    22ac:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
	for (idx = 0; idx < 5; idx++) {
    22b0:	19 82       	std	Y+1, r1	; 0x01
    22b2:	0e c0       	rjmp	.+28     	; 0x22d0 <createPassword+0x88>
		UART_sendByte(password[idx]);
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	ce 01       	movw	r24, r28
    22bc:	02 96       	adiw	r24, 0x02	; 2
    22be:	fc 01       	movw	r30, r24
    22c0:	e2 0f       	add	r30, r18
    22c2:	f3 1f       	adc	r31, r19
    22c4:	80 81       	ld	r24, Z
    22c6:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
	/* re-take the pass from the user */
	takePassword(password_confirmation);

	/* send two passwords to controller */
	UART_sendByte(UART_SEND_PASS_FLAG);
	for (idx = 0; idx < 5; idx++) {
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	8f 5f       	subi	r24, 0xFF	; 255
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	85 30       	cpi	r24, 0x05	; 5
    22d4:	78 f3       	brcs	.-34     	; 0x22b4 <createPassword+0x6c>
		UART_sendByte(password[idx]);
	}
	for (idx = 0; idx < 5; idx++) {
    22d6:	19 82       	std	Y+1, r1	; 0x01
    22d8:	0e c0       	rjmp	.+28     	; 0x22f6 <createPassword+0xae>
		UART_sendByte(password_confirmation[idx]);
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	ce 01       	movw	r24, r28
    22e2:	07 96       	adiw	r24, 0x07	; 7
    22e4:	fc 01       	movw	r30, r24
    22e6:	e2 0f       	add	r30, r18
    22e8:	f3 1f       	adc	r31, r19
    22ea:	80 81       	ld	r24, Z
    22ec:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
	/* send two passwords to controller */
	UART_sendByte(UART_SEND_PASS_FLAG);
	for (idx = 0; idx < 5; idx++) {
		UART_sendByte(password[idx]);
	}
	for (idx = 0; idx < 5; idx++) {
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	8f 5f       	subi	r24, 0xFF	; 255
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	85 30       	cpi	r24, 0x05	; 5
    22fa:	78 f3       	brcs	.-34     	; 0x22da <createPassword+0x92>
		UART_sendByte(password_confirmation[idx]);
	}

	/* UART sync */
	while(UART_recieveByte()!=UART_READY);
    22fc:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2300:	88 30       	cpi	r24, 0x08	; 8
    2302:	e1 f7       	brne	.-8      	; 0x22fc <createPassword+0xb4>

	/* get the response of controller */
	return UART_recieveByte();
    2304:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
}
    2308:	2b 96       	adiw	r28, 0x0b	; 11
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <checkPassword>:

uint8 checkPassword(void){
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	00 d0       	rcall	.+0      	; 0x2320 <checkPassword+0x6>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <checkPassword+0x8>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <checkPassword+0xa>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
	uint8 pass[5], idx=0;
    2328:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    232a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    2336:	89 ea       	ldi	r24, 0xA9	; 169
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>
	LCD_moveCursor(1,0);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>

	/* take the pass from the user */
	takePassword(pass);
    2346:	ce 01       	movw	r24, r28
    2348:	02 96       	adiw	r24, 0x02	; 2
    234a:	0e 94 84 10 	call	0x2108	; 0x2108 <takePassword>

	UART_sendByte(UART_CONFIRM_PASS_FLAG);
    234e:	85 e0       	ldi	r24, 0x05	; 5
    2350:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
	for (idx = 0; idx < 5; idx++) {
    2354:	19 82       	std	Y+1, r1	; 0x01
    2356:	0e c0       	rjmp	.+28     	; 0x2374 <checkPassword+0x5a>
		UART_sendByte(pass[idx]);
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	ce 01       	movw	r24, r28
    2360:	02 96       	adiw	r24, 0x02	; 2
    2362:	fc 01       	movw	r30, r24
    2364:	e2 0f       	add	r30, r18
    2366:	f3 1f       	adc	r31, r19
    2368:	80 81       	ld	r24, Z
    236a:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>

	/* take the pass from the user */
	takePassword(pass);

	UART_sendByte(UART_CONFIRM_PASS_FLAG);
	for (idx = 0; idx < 5; idx++) {
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	8f 5f       	subi	r24, 0xFF	; 255
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	85 30       	cpi	r24, 0x05	; 5
    2378:	78 f3       	brcs	.-34     	; 0x2358 <checkPassword+0x3e>
		UART_sendByte(pass[idx]);
	}

	while(UART_recieveByte()!=UART_READY);
    237a:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    237e:	88 30       	cpi	r24, 0x08	; 8
    2380:	e1 f7       	brne	.-8      	; 0x237a <checkPassword+0x60>

	return UART_recieveByte();
    2382:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
}
    2386:	26 96       	adiw	r28, 0x06	; 6
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <error>:

void error(void){
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(UART_PASS_UNMATCH);
    23a0:	87 e0       	ldi	r24, 0x07	; 7
    23a2:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>

	LCD_clearScreen();
    23a6:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <LCD_moveCursor>
	LCD_displayString("ERROR....");
    23b2:	87 ed       	ldi	r24, 0xD7	; 215
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_displayString>

	seconds=0;
    23ba:	10 92 fb 00 	sts	0x00FB, r1
    23be:	10 92 fa 00 	sts	0x00FA, r1
	while(seconds<60);
    23c2:	80 91 fa 00 	lds	r24, 0x00FA
    23c6:	90 91 fb 00 	lds	r25, 0x00FB
    23ca:	8c 33       	cpi	r24, 0x3C	; 60
    23cc:	91 05       	cpc	r25, r1
    23ce:	c8 f3       	brcs	.-14     	; 0x23c2 <error+0x2a>
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <__vector_7>:
#include<avr/io.h>
#include<avr/interrupt.h>

volatile static void (*g_ptr)(void)=NULL;

ISR(TIMER1_COMPA_vect){
    23d6:	1f 92       	push	r1
    23d8:	0f 92       	push	r0
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	0f 92       	push	r0
    23de:	11 24       	eor	r1, r1
    23e0:	2f 93       	push	r18
    23e2:	3f 93       	push	r19
    23e4:	4f 93       	push	r20
    23e6:	5f 93       	push	r21
    23e8:	6f 93       	push	r22
    23ea:	7f 93       	push	r23
    23ec:	8f 93       	push	r24
    23ee:	9f 93       	push	r25
    23f0:	af 93       	push	r26
    23f2:	bf 93       	push	r27
    23f4:	ef 93       	push	r30
    23f6:	ff 93       	push	r31
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
    2400:	80 91 f6 00 	lds	r24, 0x00F6
    2404:	90 91 f7 00 	lds	r25, 0x00F7
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	29 f0       	breq	.+10     	; 0x2416 <__vector_7+0x40>
		g_ptr();
    240c:	e0 91 f6 00 	lds	r30, 0x00F6
    2410:	f0 91 f7 00 	lds	r31, 0x00F7
    2414:	09 95       	icall
}
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <__vector_9>:

ISR(TIMER1_OVF_vect){
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	2f 93       	push	r18
    2448:	3f 93       	push	r19
    244a:	4f 93       	push	r20
    244c:	5f 93       	push	r21
    244e:	6f 93       	push	r22
    2450:	7f 93       	push	r23
    2452:	8f 93       	push	r24
    2454:	9f 93       	push	r25
    2456:	af 93       	push	r26
    2458:	bf 93       	push	r27
    245a:	ef 93       	push	r30
    245c:	ff 93       	push	r31
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=NULL)
    2466:	80 91 f6 00 	lds	r24, 0x00F6
    246a:	90 91 f7 00 	lds	r25, 0x00F7
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	29 f0       	breq	.+10     	; 0x247c <__vector_9+0x40>
		g_ptr();
    2472:	e0 91 f6 00 	lds	r30, 0x00F6
    2476:	f0 91 f7 00 	lds	r31, 0x00F7
    247a:	09 95       	icall
}
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	ff 91       	pop	r31
    2482:	ef 91       	pop	r30
    2484:	bf 91       	pop	r27
    2486:	af 91       	pop	r26
    2488:	9f 91       	pop	r25
    248a:	8f 91       	pop	r24
    248c:	7f 91       	pop	r23
    248e:	6f 91       	pop	r22
    2490:	5f 91       	pop	r21
    2492:	4f 91       	pop	r20
    2494:	3f 91       	pop	r19
    2496:	2f 91       	pop	r18
    2498:	0f 90       	pop	r0
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	0f 90       	pop	r0
    249e:	1f 90       	pop	r1
    24a0:	18 95       	reti

000024a2 <Timer1_init>:

/*
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <Timer1_init+0x6>
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
	/* non PWM mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    24b0:	ef e4       	ldi	r30, 0x4F	; 79
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	8c e0       	ldi	r24, 0x0C	; 12
    24b6:	80 83       	st	Z, r24

	/* clear modes */
	TCCR1B &= ~(3 << WGM12);
    24b8:	ae e4       	ldi	r26, 0x4E	; 78
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	ee e4       	ldi	r30, 0x4E	; 78
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	87 7e       	andi	r24, 0xE7	; 231
    24c4:	8c 93       	st	X, r24

	/* required mode ctc or normal mode */
	if (Config_Ptr->mode == TIMER1_CTC) {
    24c6:	e9 81       	ldd	r30, Y+1	; 0x01
    24c8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ca:	85 81       	ldd	r24, Z+5	; 0x05
    24cc:	88 23       	and	r24, r24
    24ce:	b9 f4       	brne	.+46     	; 0x24fe <Timer1_init+0x5c>
		OCR1A = Config_Ptr->compare_value;
    24d0:	aa e4       	ldi	r26, 0x4A	; 74
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e9 81       	ldd	r30, Y+1	; 0x01
    24d6:	fa 81       	ldd	r31, Y+2	; 0x02
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	11 96       	adiw	r26, 0x01	; 1
    24de:	9c 93       	st	X, r25
    24e0:	8e 93       	st	-X, r24
		SET_BIT(TCCR1B, WGM12);
    24e2:	ae e4       	ldi	r26, 0x4E	; 78
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	ee e4       	ldi	r30, 0x4E	; 78
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	88 60       	ori	r24, 0x08	; 8
    24ee:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
    24f0:	a9 e5       	ldi	r26, 0x59	; 89
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	e9 e5       	ldi	r30, 0x59	; 89
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	80 61       	ori	r24, 0x10	; 16
    24fc:	8c 93       	st	X, r24
	}
	/* set the initial counter for timer */
	TCNT1 = Config_Ptr->initial_value;
    24fe:	ac e4       	ldi	r26, 0x4C	; 76
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e9 81       	ldd	r30, Y+1	; 0x01
    2504:	fa 81       	ldd	r31, Y+2	; 0x02
    2506:	80 81       	ld	r24, Z
    2508:	91 81       	ldd	r25, Z+1	; 0x01
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	9c 93       	st	X, r25
    250e:	8e 93       	st	-X, r24

	/* configure timer 1 prescaler and start it  */
	TCCR1B = (TCCR1B & 0xf8) | (Config_Ptr->prescaler);
    2510:	ae e4       	ldi	r26, 0x4E	; 78
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	ee e4       	ldi	r30, 0x4E	; 78
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	98 2f       	mov	r25, r24
    251c:	98 7f       	andi	r25, 0xF8	; 248
    251e:	e9 81       	ldd	r30, Y+1	; 0x01
    2520:	fa 81       	ldd	r31, Y+2	; 0x02
    2522:	84 81       	ldd	r24, Z+4	; 0x04
    2524:	89 2b       	or	r24, r25
    2526:	8c 93       	st	X, r24

}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <Timer1_deInit>:

/*
 * Function to disable the Timer1
 */
void Timer1_deInit(void){
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    253a:	ef e4       	ldi	r30, 0x4F	; 79
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	10 82       	st	Z, r1
	TCCR1B &= ~(3 << WGM12);
    2540:	ae e4       	ldi	r26, 0x4E	; 78
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	ee e4       	ldi	r30, 0x4E	; 78
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	87 7e       	andi	r24, 0xE7	; 231
    254c:	8c 93       	st	X, r24
	TCCR1B &= 0xf8;
    254e:	ae e4       	ldi	r26, 0x4E	; 78
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ee e4       	ldi	r30, 0x4E	; 78
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	88 7f       	andi	r24, 0xF8	; 248
    255a:	8c 93       	st	X, r24
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <Timer1_setCallBack>:

/*
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <Timer1_setCallBack+0x6>
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=a_ptr;
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	90 93 f7 00 	sts	0x00F7, r25
    2578:	80 93 f6 00 	sts	0x00F6, r24
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <__vector_13>:
#include<avr/io.h>
#include<avr/interrupt.h>

static volatile void (*g_ptr)(uint8)=0;

ISR(USART_RXC_vect){
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	11 24       	eor	r1, r1
    2590:	2f 93       	push	r18
    2592:	3f 93       	push	r19
    2594:	4f 93       	push	r20
    2596:	5f 93       	push	r21
    2598:	6f 93       	push	r22
    259a:	7f 93       	push	r23
    259c:	8f 93       	push	r24
    259e:	9f 93       	push	r25
    25a0:	af 93       	push	r26
    25a2:	bf 93       	push	r27
    25a4:	ef 93       	push	r30
    25a6:	ff 93       	push	r31
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr!=0){
    25b0:	80 91 f8 00 	lds	r24, 0x00F8
    25b4:	90 91 f9 00 	lds	r25, 0x00F9
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	41 f0       	breq	.+16     	; 0x25cc <__vector_13+0x46>
		g_ptr(UDR);
    25bc:	e0 91 f8 00 	lds	r30, 0x00F8
    25c0:	f0 91 f9 00 	lds	r31, 0x00F9
    25c4:	ac e2       	ldi	r26, 0x2C	; 44
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	8c 91       	ld	r24, X
    25ca:	09 95       	icall
	}
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <UART_init>:

/*
 * initialization for UART Driver
 * set RX interrupt or polling as req
 */
void UART_init(const UART_ConfigType *configuration) {
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <UART_init+0x6>
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <UART_init+0x8>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	9c 83       	std	Y+4, r25	; 0x04
    2600:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA = 0;
    2602:	eb e2       	ldi	r30, 0x2B	; 43
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	10 82       	st	Z, r1

	/* reduce the divisor of the baud rate divider from 16 to 8 */
	SET_BIT(UCSRA, U2X);
    2608:	ab e2       	ldi	r26, 0x2B	; 43
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	eb e2       	ldi	r30, 0x2B	; 43
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	82 60       	ori	r24, 0x02	; 2
    2614:	8c 93       	st	X, r24

	/* set RX interrupt or polling as required */
	MAKE_BIT(UCSRB, RXCIE, configuration->RX_completeInerrupt);
    2616:	aa e2       	ldi	r26, 0x2A	; 42
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	ea e2       	ldi	r30, 0x2A	; 42
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	28 2f       	mov	r18, r24
    2622:	2f 77       	andi	r18, 0x7F	; 127
    2624:	eb 81       	ldd	r30, Y+3	; 0x03
    2626:	fc 81       	ldd	r31, Y+4	; 0x04
    2628:	80 81       	ld	r24, Z
    262a:	88 2f       	mov	r24, r24
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	96 95       	lsr	r25
    2630:	98 2f       	mov	r25, r24
    2632:	88 27       	eor	r24, r24
    2634:	97 95       	ror	r25
    2636:	87 95       	ror	r24
    2638:	82 2b       	or	r24, r18
    263a:	8c 93       	st	X, r24

	/* enable rx and tx */
	SET_BIT(UCSRB, RXEN);
    263c:	aa e2       	ldi	r26, 0x2A	; 42
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	ea e2       	ldi	r30, 0x2A	; 42
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	80 61       	ori	r24, 0x10	; 16
    2648:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    264a:	aa e2       	ldi	r26, 0x2A	; 42
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	ea e2       	ldi	r30, 0x2A	; 42
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	88 60       	ori	r24, 0x08	; 8
    2656:	8c 93       	st	X, r24

	/* set this bit to write into UCSRC */
	SET_BIT(UCSRC, URSEL);
    2658:	a0 e4       	ldi	r26, 0x40	; 64
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e0 e4       	ldi	r30, 0x40	; 64
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	80 68       	ori	r24, 0x80	; 128
    2664:	8c 93       	st	X, r24

	/* set error parity as required */
	UCSRC = (UCSRC & 0xcf) | (configuration->parity << 4);
    2666:	a0 e4       	ldi	r26, 0x40	; 64
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e0 e4       	ldi	r30, 0x40	; 64
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	28 2f       	mov	r18, r24
    2672:	2f 7c       	andi	r18, 0xCF	; 207
    2674:	eb 81       	ldd	r30, Y+3	; 0x03
    2676:	fc 81       	ldd	r31, Y+4	; 0x04
    2678:	81 81       	ldd	r24, Z+1	; 0x01
    267a:	88 2f       	mov	r24, r24
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	82 95       	swap	r24
    2680:	92 95       	swap	r25
    2682:	90 7f       	andi	r25, 0xF0	; 240
    2684:	98 27       	eor	r25, r24
    2686:	80 7f       	andi	r24, 0xF0	; 240
    2688:	98 27       	eor	r25, r24
    268a:	82 2b       	or	r24, r18
    268c:	8c 93       	st	X, r24

	/* set stop bit as required */
	MAKE_BIT(UCSRC, USBS, configuration->stop_bit);
    268e:	a0 e4       	ldi	r26, 0x40	; 64
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e0 e4       	ldi	r30, 0x40	; 64
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	28 2f       	mov	r18, r24
    269a:	27 7f       	andi	r18, 0xF7	; 247
    269c:	eb 81       	ldd	r30, Y+3	; 0x03
    269e:	fc 81       	ldd	r31, Y+4	; 0x04
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	82 2b       	or	r24, r18
    26b4:	8c 93       	st	X, r24

	/* set data BITs */
	UCSRC = (UCSRC & 0xf9) | ((configuration->bit_data & 3) << 1);
    26b6:	a0 e4       	ldi	r26, 0x40	; 64
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e0 e4       	ldi	r30, 0x40	; 64
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	28 2f       	mov	r18, r24
    26c2:	29 7f       	andi	r18, 0xF9	; 249
    26c4:	eb 81       	ldd	r30, Y+3	; 0x03
    26c6:	fc 81       	ldd	r31, Y+4	; 0x04
    26c8:	83 81       	ldd	r24, Z+3	; 0x03
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	83 70       	andi	r24, 0x03	; 3
    26d0:	90 70       	andi	r25, 0x00	; 0
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	82 2b       	or	r24, r18
    26d8:	8c 93       	st	X, r24

	/* set baud rate as required */
	UBRRL=0;
    26da:	e9 e2       	ldi	r30, 0x29	; 41
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	10 82       	st	Z, r1
	uint16 baudRate = F_CPU / (8UL * configuration->baud_rate) - 1;
    26e0:	eb 81       	ldd	r30, Y+3	; 0x03
    26e2:	fc 81       	ldd	r31, Y+4	; 0x04
    26e4:	84 81       	ldd	r24, Z+4	; 0x04
    26e6:	95 81       	ldd	r25, Z+5	; 0x05
    26e8:	cc 01       	movw	r24, r24
    26ea:	a0 e0       	ldi	r26, 0x00	; 0
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	aa 1f       	adc	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	aa 1f       	adc	r26, r26
    26fc:	bb 1f       	adc	r27, r27
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	aa 1f       	adc	r26, r26
    2704:	bb 1f       	adc	r27, r27
    2706:	9c 01       	movw	r18, r24
    2708:	ad 01       	movw	r20, r26
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	92 e1       	ldi	r25, 0x12	; 18
    270e:	aa e7       	ldi	r26, 0x7A	; 122
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 2a 14 	call	0x2854	; 0x2854 <__udivmodsi4>
    271a:	da 01       	movw	r26, r20
    271c:	c9 01       	movw	r24, r18
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=(baudRate&0x00ff);
    2724:	e9 e2       	ldi	r30, 0x29	; 41
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	80 83       	st	Z, r24
	UBRRH=baudRate>>8;
    272c:	e0 e4       	ldi	r30, 0x40	; 64
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	89 2f       	mov	r24, r25
    2736:	99 27       	eor	r25, r25
    2738:	80 83       	st	Z, r24
}
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <UART_sendByte>:

/*
 * send data using UART serial communication
 */
void UART_sendByte(uint8 data) {
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	0f 92       	push	r0
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA, UDRE));
    2754:	eb e2       	ldi	r30, 0x2B	; 43
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	80 72       	andi	r24, 0x20	; 32
    2760:	90 70       	andi	r25, 0x00	; 0
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	b9 f3       	breq	.-18     	; 0x2754 <UART_sendByte+0xc>
	UDR = data;
    2766:	ec e2       	ldi	r30, 0x2C	; 44
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	80 83       	st	Z, r24
}
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <UART_recieveByte>:

/*
 * recieve data form UART using polling method
 */
uint8 UART_recieveByte() {
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA, RXC));
    277e:	eb e2       	ldi	r30, 0x2B	; 43
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	88 23       	and	r24, r24
    2786:	dc f7       	brge	.-10     	; 0x277e <UART_recieveByte+0x8>
	SET_BIT(UCSRA,RXC);
    2788:	ab e2       	ldi	r26, 0x2B	; 43
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	eb e2       	ldi	r30, 0x2B	; 43
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	80 68       	ori	r24, 0x80	; 128
    2794:	8c 93       	st	X, r24
	return UDR;
    2796:	ec e2       	ldi	r30, 0x2C	; 44
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <UART_sendString>:

/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <UART_sendString+0x6>
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	0a c0       	rjmp	.+20     	; 0x27c6 <UART_sendString+0x24>
	while (*str != '\0') {
		UART_sendByte(*str);
    27b2:	e9 81       	ldd	r30, Y+1	; 0x01
    27b4:	fa 81       	ldd	r31, Y+2	; 0x02
    27b6:	80 81       	ld	r24, Z
    27b8:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
		str++;
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 96       	adiw	r24, 0x01	; 1
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
/*
 * send full string using UART
 * send hash # as indicator to the end of string
 */
void UART_sendString(const uint8 *str) {
	while (*str != '\0') {
    27c6:	e9 81       	ldd	r30, Y+1	; 0x01
    27c8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ca:	80 81       	ld	r24, Z
    27cc:	88 23       	and	r24, r24
    27ce:	89 f7       	brne	.-30     	; 0x27b2 <UART_sendString+0x10>
		UART_sendByte(*str);
		str++;
	}
	UART_sendByte('#');
    27d0:	83 e2       	ldi	r24, 0x23	; 35
    27d2:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <UART_recieveString>:

/*
 * recieve string using UART polling msethod
 * warning -> this function should be sync with the sender to avoid overwrite
 */
void UART_recieveString(uint8 *str) {
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <UART_recieveString+0x6>
    27e6:	0f 92       	push	r0
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
	do {
		*str = UART_recieveByte();
    27f0:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    27f4:	e9 81       	ldd	r30, Y+1	; 0x01
    27f6:	fa 81       	ldd	r31, Y+2	; 0x02
    27f8:	80 83       	st	Z, r24
	} while (*str++ != '#');
    27fa:	e9 81       	ldd	r30, Y+1	; 0x01
    27fc:	fa 81       	ldd	r31, Y+2	; 0x02
    27fe:	80 81       	ld	r24, Z
    2800:	1b 82       	std	Y+3, r1	; 0x03
    2802:	83 32       	cpi	r24, 0x23	; 35
    2804:	11 f0       	breq	.+4      	; 0x280a <UART_recieveString+0x2a>
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	88 23       	and	r24, r24
    2818:	59 f7       	brne	.-42     	; 0x27f0 <UART_recieveString+0x10>
	*(str - 1) = '\0';
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	fc 01       	movw	r30, r24
    2820:	31 97       	sbiw	r30, 0x01	; 1
    2822:	10 82       	st	Z, r1
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <UART_setCallBack>:

/*
 * save the address of callback functiom
 */
void UART_setCallBack(void(*f_ptr)(uint8)){
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <UART_setCallBack+0x6>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	9a 83       	std	Y+2, r25	; 0x02
    283c:	89 83       	std	Y+1, r24	; 0x01
	g_ptr=f_ptr;
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	90 93 f9 00 	sts	0x00F9, r25
    2846:	80 93 f8 00 	sts	0x00F8, r24
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <__udivmodsi4>:
    2854:	a1 e2       	ldi	r26, 0x21	; 33
    2856:	1a 2e       	mov	r1, r26
    2858:	aa 1b       	sub	r26, r26
    285a:	bb 1b       	sub	r27, r27
    285c:	fd 01       	movw	r30, r26
    285e:	0d c0       	rjmp	.+26     	; 0x287a <__udivmodsi4_ep>

00002860 <__udivmodsi4_loop>:
    2860:	aa 1f       	adc	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	ee 1f       	adc	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	a2 17       	cp	r26, r18
    286a:	b3 07       	cpc	r27, r19
    286c:	e4 07       	cpc	r30, r20
    286e:	f5 07       	cpc	r31, r21
    2870:	20 f0       	brcs	.+8      	; 0x287a <__udivmodsi4_ep>
    2872:	a2 1b       	sub	r26, r18
    2874:	b3 0b       	sbc	r27, r19
    2876:	e4 0b       	sbc	r30, r20
    2878:	f5 0b       	sbc	r31, r21

0000287a <__udivmodsi4_ep>:
    287a:	66 1f       	adc	r22, r22
    287c:	77 1f       	adc	r23, r23
    287e:	88 1f       	adc	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	1a 94       	dec	r1
    2884:	69 f7       	brne	.-38     	; 0x2860 <__udivmodsi4_loop>
    2886:	60 95       	com	r22
    2888:	70 95       	com	r23
    288a:	80 95       	com	r24
    288c:	90 95       	com	r25
    288e:	9b 01       	movw	r18, r22
    2890:	ac 01       	movw	r20, r24
    2892:	bd 01       	movw	r22, r26
    2894:	cf 01       	movw	r24, r30
    2896:	08 95       	ret

00002898 <__prologue_saves__>:
    2898:	2f 92       	push	r2
    289a:	3f 92       	push	r3
    289c:	4f 92       	push	r4
    289e:	5f 92       	push	r5
    28a0:	6f 92       	push	r6
    28a2:	7f 92       	push	r7
    28a4:	8f 92       	push	r8
    28a6:	9f 92       	push	r9
    28a8:	af 92       	push	r10
    28aa:	bf 92       	push	r11
    28ac:	cf 92       	push	r12
    28ae:	df 92       	push	r13
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	ca 1b       	sub	r28, r26
    28c2:	db 0b       	sbc	r29, r27
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	09 94       	ijmp

000028d0 <__epilogue_restores__>:
    28d0:	2a 88       	ldd	r2, Y+18	; 0x12
    28d2:	39 88       	ldd	r3, Y+17	; 0x11
    28d4:	48 88       	ldd	r4, Y+16	; 0x10
    28d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    28d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    28da:	7d 84       	ldd	r7, Y+13	; 0x0d
    28dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    28de:	9b 84       	ldd	r9, Y+11	; 0x0b
    28e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    28e2:	b9 84       	ldd	r11, Y+9	; 0x09
    28e4:	c8 84       	ldd	r12, Y+8	; 0x08
    28e6:	df 80       	ldd	r13, Y+7	; 0x07
    28e8:	ee 80       	ldd	r14, Y+6	; 0x06
    28ea:	fd 80       	ldd	r15, Y+5	; 0x05
    28ec:	0c 81       	ldd	r16, Y+4	; 0x04
    28ee:	1b 81       	ldd	r17, Y+3	; 0x03
    28f0:	aa 81       	ldd	r26, Y+2	; 0x02
    28f2:	b9 81       	ldd	r27, Y+1	; 0x01
    28f4:	ce 0f       	add	r28, r30
    28f6:	d1 1d       	adc	r29, r1
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	ed 01       	movw	r28, r26
    2904:	08 95       	ret

00002906 <itoa>:
    2906:	fb 01       	movw	r30, r22
    2908:	9f 01       	movw	r18, r30
    290a:	e8 94       	clt
    290c:	42 30       	cpi	r20, 0x02	; 2
    290e:	c4 f0       	brlt	.+48     	; 0x2940 <itoa+0x3a>
    2910:	45 32       	cpi	r20, 0x25	; 37
    2912:	b4 f4       	brge	.+44     	; 0x2940 <itoa+0x3a>
    2914:	4a 30       	cpi	r20, 0x0A	; 10
    2916:	29 f4       	brne	.+10     	; 0x2922 <itoa+0x1c>
    2918:	97 fb       	bst	r25, 7
    291a:	1e f4       	brtc	.+6      	; 0x2922 <itoa+0x1c>
    291c:	90 95       	com	r25
    291e:	81 95       	neg	r24
    2920:	9f 4f       	sbci	r25, 0xFF	; 255
    2922:	64 2f       	mov	r22, r20
    2924:	77 27       	eor	r23, r23
    2926:	0e 94 b4 14 	call	0x2968	; 0x2968 <__udivmodhi4>
    292a:	80 5d       	subi	r24, 0xD0	; 208
    292c:	8a 33       	cpi	r24, 0x3A	; 58
    292e:	0c f0       	brlt	.+2      	; 0x2932 <itoa+0x2c>
    2930:	89 5d       	subi	r24, 0xD9	; 217
    2932:	81 93       	st	Z+, r24
    2934:	cb 01       	movw	r24, r22
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	a1 f7       	brne	.-24     	; 0x2922 <itoa+0x1c>
    293a:	16 f4       	brtc	.+4      	; 0x2940 <itoa+0x3a>
    293c:	5d e2       	ldi	r21, 0x2D	; 45
    293e:	51 93       	st	Z+, r21
    2940:	10 82       	st	Z, r1
    2942:	c9 01       	movw	r24, r18
    2944:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <strrev>

00002948 <strrev>:
    2948:	dc 01       	movw	r26, r24
    294a:	fc 01       	movw	r30, r24
    294c:	67 2f       	mov	r22, r23
    294e:	71 91       	ld	r23, Z+
    2950:	77 23       	and	r23, r23
    2952:	e1 f7       	brne	.-8      	; 0x294c <strrev+0x4>
    2954:	32 97       	sbiw	r30, 0x02	; 2
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <strrev+0x18>
    2958:	7c 91       	ld	r23, X
    295a:	6d 93       	st	X+, r22
    295c:	70 83       	st	Z, r23
    295e:	62 91       	ld	r22, -Z
    2960:	ae 17       	cp	r26, r30
    2962:	bf 07       	cpc	r27, r31
    2964:	c8 f3       	brcs	.-14     	; 0x2958 <strrev+0x10>
    2966:	08 95       	ret

00002968 <__udivmodhi4>:
    2968:	aa 1b       	sub	r26, r26
    296a:	bb 1b       	sub	r27, r27
    296c:	51 e1       	ldi	r21, 0x11	; 17
    296e:	07 c0       	rjmp	.+14     	; 0x297e <__udivmodhi4_ep>

00002970 <__udivmodhi4_loop>:
    2970:	aa 1f       	adc	r26, r26
    2972:	bb 1f       	adc	r27, r27
    2974:	a6 17       	cp	r26, r22
    2976:	b7 07       	cpc	r27, r23
    2978:	10 f0       	brcs	.+4      	; 0x297e <__udivmodhi4_ep>
    297a:	a6 1b       	sub	r26, r22
    297c:	b7 0b       	sbc	r27, r23

0000297e <__udivmodhi4_ep>:
    297e:	88 1f       	adc	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	5a 95       	dec	r21
    2984:	a9 f7       	brne	.-22     	; 0x2970 <__udivmodhi4_loop>
    2986:	80 95       	com	r24
    2988:	90 95       	com	r25
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	08 95       	ret

00002990 <_exit>:
    2990:	f8 94       	cli

00002992 <__stop_program>:
    2992:	ff cf       	rjmp	.-2      	; 0x2992 <__stop_program>
